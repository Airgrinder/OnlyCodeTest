(()=>{var e={460:(e,t,r)=>{"use strict";r.d(t,{Z:()=>o});var n=r(537),i=r.n(n),s=r(645),a=r.n(s)()(i());a.push([e.id,'.main{width:1438px;height:1078px;position:relative;margin:0 auto;border:1px rgba(66,86,122,.1) solid}.main::before,.main::after{content:"";position:absolute;background-color:rgba(66,86,122,.1)}.main::before{top:479px;left:0;width:100%;height:1px;transform:translateY(-50%)}.main::after{top:0;left:50%;width:1px;height:100%;transform:translateX(-50%)}.main-container-title-decoration{position:absolute;margin:10px 0 0 -1px;height:120px;width:5px;z-index:2;background:linear-gradient(rgb(56, 119, 238), rgb(239, 93, 168))}.main-container-title-head{margin:166px 0 0 79px;width:353px;height:134px;font-size:56px;line-height:67.2px}.main-container-sliderPanel{margin:393px 0 0 79px}.main-container-sliderPanel-index{font-size:14px;font-weight:400}.main-container-sliderPanel-arrows{margin-top:21px;display:flex;justify-content:space-between;width:120px}.main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-left,.main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-right{width:50px;height:50px;border:1px rgba(66,86,122,.5) solid;background:none;border-radius:50%;display:flex;justify-content:center;align-items:center;cursor:pointer;transition:.3s}.main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-right img{transform:rotate(180deg)}.main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-left:hover,.main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-right:hover{background:#fff}.main-circle{position:absolute;border:1px rgba(66,86,122,.1) solid;border-radius:50%;width:528px;height:528px;top:479px;left:50%;transform:translate(-50%, -50%);z-index:5}.main-circle-container{width:100%;height:100%;border-radius:50%;display:flex;align-items:center;justify-content:center;transition:.3s}.main-circle-point{display:flex;justify-content:center;align-items:center;width:54px;height:54px;border-radius:50%;position:absolute;transform-origin:center center;cursor:pointer}.main-circle-point:nth-child(1){transform:rotate(60deg) translate(265px) rotate(-60deg)}.main-circle-point:nth-child(2){transform:rotate(120deg) translate(265px) rotate(-120deg)}.main-circle-point:nth-child(3){transform:rotate(180deg) translate(265px) rotate(-180deg)}.main-circle-point:nth-child(4){transform:rotate(240deg) translate(265px) rotate(-240deg)}.main-circle-point:nth-child(5){transform:rotate(300deg) translate(265px) rotate(-300deg)}.main-circle-point:nth-child(6){transform:rotate(360deg) translate(265px) rotate(-360deg)}.main-circle-point:hover>.main-circle-point-index{width:54px;height:52px;border:1px rgba(48,62,88,.5) solid;color:#42567a;font-size:20px;font-weight:400}.main-circle-point-index{display:flex;justify-content:center;align-items:center;border-radius:50%;width:0;height:0;background:#f4f5f9;border:3px #42567a solid;color:rgba(0,0,0,0);transition:.3s}.main-circle-point-index.active{width:54px;height:52px;border:1px rgba(48,62,88,.5) solid;color:#42567a;font-size:20px;font-weight:400}.main-circle-description{left:0;top:0;margin:20px 0 0 450px;position:absolute;color:#42567a;font-size:20px;font-weight:700;transition:.3s}.main-circle-years{margin:-2px 0 0 2px;letter-spacing:-3px;left:-46%;top:33%;position:absolute;width:973px;font-size:200px;font-weight:700;line-height:160px;display:flex;justify-content:space-between;z-index:-1}.main-circle-years .main-circle-years-first{color:#3877ee;transition:150ms}.main-circle-years .main-circle-years-last{color:#ef5da8;transition:150ms}.main-slider{margin-top:57px;display:flex;justify-content:space-between}.main-slider-wrapper{overflow:hidden;width:1280px;height:135px;cursor:pointer}.main-slider-items{display:flex}.main-slider-items-item{margin-right:80px}.main-slider-items-item .main-slider-items-item-head{color:#3877ee;font-size:25px;font-family:Bebas Neue,serif;font-weight:400;text-transform:uppercase;line-height:30px;height:43px;transition:.3s}.main-slider-items-item .main-slider-items-item-description{font-size:20px;width:350px;display:inline-block;line-height:30px;transition:.3s}.main-slider-items-item:last-child{margin-right:0}.main-slider-arrow-left,.main-slider-arrow-right{width:40px;height:40px;background:none;border:none;box-shadow:0 0 15px rgba(56,119,238,.1);border-radius:9999px;z-index:3;cursor:pointer;transition:.3s}.main-slider-arrow-left:hover,.main-slider-arrow-right:hover{background:#fff}.main-slider-arrow-left{margin:41px 0 0 38px}.main-slider-arrow-right{margin:41px 38px 0 0}.main-slider-arrow-left img{transform:rotate(180deg)}@media(max-width: 1439px){.main{bottom:0;width:320px;height:568px;margin:0 auto;border:none}.main:before{margin-left:20px;top:293px;height:2px;width:280px}.main:after{display:none}.main-container-title-decoration{display:none}.main-container-title-head{width:120px;height:40px;padding:58px 0 0 20px;margin:0;font-size:20px;line-height:1.2}.main-container-sliderPanel{position:absolute;bottom:0;height:66px;margin:0}.main-container-sliderPanel-pagination{left:113px;top:28px;width:95px;height:6px;position:absolute;margin:0 auto;display:flex;justify-content:space-around}.main-container-sliderPanel-pagination .main-container-sliderPanel-pagination-bullet{width:6px;height:6px;background:#42567a;border-radius:50%;opacity:.4;transition:.3s}.main-container-sliderPanel-index{margin:0 0 0 20px}.main-container-sliderPanel-arrows{margin:8px 0 0 20px;width:58px}.main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-left,.main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-right{width:25px;height:25px}.main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-left img{transform:scale(0.5)}.main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-right img{transform:rotate(180deg) scale(0.5)}.main-circle{margin-top:93px;width:100%;height:150px;border:none;display:flex;top:initial}.main-circle .main-circle-container{width:100%;display:none;position:initial}.main-circle .main-circle-description{margin:140px 0 0 20px}.main-circle .main-circle-years{bottom:0;top:0;left:0;position:absolute;font-size:56px;width:100%;margin:auto;justify-content:space-evenly;letter-spacing:-1px}.main-slider{margin:210px 0 0 20px}.main-slider-arrow-left,.main-slider-arrow-right{display:none}.main-slider-wrapper{width:100%}.main-slider-items-item{margin-right:25px}.main-slider-items-item .main-slider-items-item-head{font-size:16px;height:38px}.main-slider-items-item .main-slider-items-item-description{width:166px;height:80px;font-size:14px;line-height:20px}}*{color:#42567a;font-family:"PT Sans",sans-serif;margin:0}body{background:#f4f5f9}::-webkit-scrollbar{width:0}.hidden{visibility:hidden}.blocked{opacity:.5;cursor:default !important}.blocked:hover{background:none !important}.current{opacity:1 !important}.preload *{-webkit-transition:none !important;-moz-transition:none !important;-ms-transition:none !important;-o-transition:none !important}',"",{version:3,sources:["webpack://./src/style/main.scss","webpack://./styles.scss"],names:[],mappings:"AAQA,MACE,YAAA,CACA,aAAA,CACA,iBAAA,CACA,aAAA,CAGA,mCAAA,CAGA,2BAEE,UAAA,CACA,iBAAA,CACA,mCAtBW,CAyBb,cACE,SAAA,CACA,MAAA,CACA,UAAA,CACA,UAAA,CACA,0BAAA,CAGF,aACE,KAAA,CACA,QAAA,CACA,SAAA,CACA,WAAA,CACA,0BAAA,CAIJ,iCACE,iBAAA,CACA,oBAAA,CACA,YAAA,CACA,SAAA,CACA,SAAA,CACA,gEA3Ce,CA8CjB,2BACE,qBAAA,CACA,WAAA,CACA,YAAA,CACA,cAAA,CACA,kBAAA,CAGF,4BACE,qBAAA,CAGF,kCACE,cAAA,CACA,eAhEQ,CAmEV,mCACE,eAAA,CACA,YAAA,CACA,6BAAA,CACA,WAAA,CAEA,uJAEE,UAAA,CACA,WAAA,CACA,mCAAA,CACA,eAAA,CACA,iBAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,cAAA,CACA,cAAA,CAGF,gFACE,wBAAA,CAGF,mKAEE,eAxFa,CA6FjB,aACE,iBAAA,CACA,mCAAA,CACA,iBAAA,CACA,WAAA,CACA,YAAA,CACA,SAAA,CACA,QAAA,CACA,+BAAA,CACA,SAAA,CAGF,uBACE,UAAA,CACA,WAAA,CACA,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,cAAA,CAGF,mBACE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,iBAAA,CACA,8BAAA,CACA,cAAA,CAEA,gCACE,uDAAA,CAGF,gCACE,yDAAA,CAGF,gCACE,yDAAA,CAGF,gCACE,yDAAA,CAGF,gCACE,yDAAA,CAGF,gCACE,yDAAA,CAGF,kDACE,UAAA,CACA,WAAA,CACA,kCAAA,CACA,aAAA,CACA,cAAA,CACA,eAjKM,CAqKV,yBACE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,kBAAA,CACA,wBAAA,CACA,mBAAA,CACA,cAAA,CAEA,gCACE,UAAA,CACA,WAAA,CACA,kCAAA,CACA,aAAA,CACA,cAAA,CACA,eAvLM,CA2LV,yBACE,MAAA,CACA,KAAA,CACA,qBAAA,CACA,iBAAA,CACA,aAAA,CACA,cAAA,CACA,eAjMK,CAkML,cAAA,CAGF,mBACE,mBAAA,CACA,mBAAA,CACA,SAAA,CACA,OAAA,CACA,iBAAA,CACA,WAAA,CACA,eAAA,CACA,eA7MK,CA8ML,iBAAA,CACA,YAAA,CACA,6BAAA,CACA,UAAA,CAEA,4CACE,aAnNS,CAoNT,gBAAA,CAGF,2CACE,aAvNQ,CAwNR,gBAAA,CAIJ,aACE,eAAA,CACA,YAAA,CACA,6BAAA,CAGF,qBACE,eAAA,CACA,YAAA,CACA,YAAA,CACA,cAAA,CAGF,mBACE,YAAA,CAGF,wBACE,iBAAA,CAEA,qDACE,aAlPS,CAmPT,cAAA,CACA,4BAAA,CACA,eAvPM,CAwPN,wBAAA,CACA,gBAAA,CACA,WAAA,CACA,cAAA,CAGF,4DACE,cAAA,CACA,WAAA,CACA,oBAAA,CACA,gBAAA,CACA,cAAA,CAIJ,mCACE,cAAA,CAGF,iDAEE,UAAA,CACA,WAAA,CACA,eAAA,CACA,WAAA,CACA,uCAAA,CACA,oBAAA,CACA,SAAA,CACA,cAAA,CACA,cAAA,CAGF,6DAEE,eArRe,CAwRjB,wBACE,oBAAA,CAGF,yBACE,oBAAA,CAGF,4BACE,wBAAA,CAGF,0BACE,MACE,QAAA,CACA,WAAA,CACA,YAAA,CACA,aAAA,CACA,WAAA,CAEA,aACE,gBAAA,CACA,SAAA,CACA,UAAA,CACA,WAAA,CAGF,YACE,YAAA,CAIJ,iCACE,YAAA,CAGF,2BACE,WAAA,CACA,WAAA,CACA,qBAAA,CACA,QAAA,CACA,cAAA,CACA,eAAA,CAGF,4BACE,iBAAA,CACA,QAAA,CACA,WAAA,CACA,QAAA,CAGF,uCACE,UAAA,CACA,QAAA,CACA,UAAA,CACA,UAAA,CACA,iBAAA,CACA,aAAA,CACA,YAAA,CACA,4BAAA,CAEA,qFACE,SAAA,CACA,UAAA,CACA,kBAAA,CACA,iBAAA,CACA,UAAA,CACA,cAAA,CAIJ,kCACE,iBAAA,CAGF,mCACE,mBAAA,CACA,UAAA,CAEA,uJAEE,UAAA,CACA,WAAA,CAGF,+EACE,oBAAA,CAGF,gFACE,mCAAA,CAIJ,aACE,eAAA,CACA,UAAA,CACA,YAAA,CACA,WAAA,CACA,YAAA,CACA,WAAA,CAEA,oCACE,UAAA,CACA,YAAA,CACA,gBAAA,CAGF,sCACE,qBAAA,CAGF,gCACE,QAAA,CACA,KAAA,CACA,MAAA,CACA,iBAAA,CACA,cAAA,CACA,UAAA,CACA,WAAA,CACA,4BAAA,CACA,mBAAA,CAIJ,aACE,qBAAA,CAGF,iDAEE,YAAA,CAGF,qBACE,UAAA,CAGF,wBACE,iBAAA,CAEA,qDACE,cAAA,CACA,WAAA,CAGF,4DACE,WAAA,CACA,WAAA,CACA,cAAA,CACA,gBAAA,CAAA,CCnbN,EACE,aAAA,CACA,gCAAA,CACA,QAAA,CAGF,KACE,kBAAA,CAGF,oBACE,OAAA,CAGF,QACE,iBAAA,CAGF,SACE,UAAA,CACA,yBAAA,CAGF,eACE,0BAAA,CAGF,SACE,oBAAA,CAGF,WACE,kCAAA,CACA,+BAAA,CACA,8BAAA,CACA,6BAAA",sourcesContent:['$border-color: rgba(66, 86, 122, 0.1);\r\n$regular: 400;\r\n$bold: 700;\r\n$first-year: #3877ee;\r\n$last-year: #ef5da8;\r\n$decor-gradient: linear-gradient(rgba(56, 119, 238, 1), rgba(239, 93, 168, 1));\r\n$arr-background: #ffffff;\r\n\r\n.main {\r\n  width: 1438px;\r\n  height: 1078px;\r\n  position: relative;\r\n  margin: 0 auto;\r\n\r\n  // Рисуем границы\r\n  border: 1px $border-color solid;\r\n\r\n  // Рисуем перекрестие\r\n  &::before,\r\n  &::after {\r\n    content: "";\r\n    position: absolute;\r\n    background-color: $border-color;\r\n  }\r\n\r\n  &::before {\r\n    top: 479px;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 1px;\r\n    transform: translateY(-50%);\r\n  }\r\n\r\n  &::after {\r\n    top: 0;\r\n    left: 50%;\r\n    width: 1px;\r\n    height: 100%;\r\n    transform: translateX(-50%);\r\n  }\r\n}\r\n\r\n.main-container-title-decoration {\r\n  position: absolute;\r\n  margin: 10px 0 0 -1px;\r\n  height: 120px;\r\n  width: 5px;\r\n  z-index: 2;\r\n  background: $decor-gradient;\r\n}\r\n\r\n.main-container-title-head {\r\n  margin: 166px 0 0 79px;\r\n  width: 353px;\r\n  height: 134px;\r\n  font-size: 56px;\r\n  line-height: 67.2px;\r\n}\r\n\r\n.main-container-sliderPanel {\r\n  margin: 393px 0 0 79px;\r\n}\r\n\r\n.main-container-sliderPanel-index {\r\n  font-size: 14px;\r\n  font-weight: $regular;\r\n}\r\n\r\n.main-container-sliderPanel-arrows {\r\n  margin-top: 21px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 120px;\r\n\r\n  .main-container-sliderPanel-arrows-left,\r\n  .main-container-sliderPanel-arrows-right {\r\n    width: 50px;\r\n    height: 50px;\r\n    border: 1px rgba(66, 86, 122, 0.5) solid;\r\n    background: none;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n  }\r\n\r\n  .main-container-sliderPanel-arrows-right img {\r\n    transform: rotate(180deg);\r\n  }\r\n\r\n  .main-container-sliderPanel-arrows-left:hover,\r\n  .main-container-sliderPanel-arrows-right:hover {\r\n    background: $arr-background;\r\n  }\r\n}\r\n\r\n// Рисуем круг\r\n.main-circle {\r\n  position: absolute;\r\n  border: 1px $border-color solid;\r\n  border-radius: 50%;\r\n  width: 528px;\r\n  height: 528px;\r\n  top: 479px;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 5;\r\n}\r\n\r\n.main-circle-container {\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: 0.3s;\r\n}\r\n\r\n.main-circle-point {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 54px;\r\n  height: 54px;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  transform-origin: center center;\r\n  cursor: pointer;\r\n\r\n  &:nth-child(1) {\r\n    transform: rotate(60deg) translate(265px) rotate(-60deg);\r\n  }\r\n\r\n  &:nth-child(2) {\r\n    transform: rotate(120deg) translate(265px) rotate(-120deg);\r\n  }\r\n\r\n  &:nth-child(3) {\r\n    transform: rotate(180deg) translate(265px) rotate(-180deg);\r\n  }\r\n\r\n  &:nth-child(4) {\r\n    transform: rotate(240deg) translate(265px) rotate(-240deg);\r\n  }\r\n\r\n  &:nth-child(5) {\r\n    transform: rotate(300deg) translate(265px) rotate(-300deg);\r\n  }\r\n\r\n  &:nth-child(6) {\r\n    transform: rotate(360deg) translate(265px) rotate(-360deg);\r\n  }\r\n\r\n  &:hover > .main-circle-point-index {\r\n    width: 54px;\r\n    height: 52px;\r\n    border: 1px rgba(48, 62, 88, 0.5) solid;\r\n    color: #42567a;\r\n    font-size: 20px;\r\n    font-weight: $regular;\r\n  }\r\n}\r\n\r\n.main-circle-point-index {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 50%;\r\n  width: 0;\r\n  height: 0;\r\n  background: rgba(244, 245, 249, 1);\r\n  border: 3px #42567a solid;\r\n  color: transparent;\r\n  transition: 0.3s;\r\n\r\n  &.active {\r\n    width: 54px;\r\n    height: 52px;\r\n    border: 1px rgba(48, 62, 88, 0.5) solid;\r\n    color: #42567a;\r\n    font-size: 20px;\r\n    font-weight: $regular;\r\n  }\r\n}\r\n\r\n.main-circle-description {\r\n  left: 0;\r\n  top: 0;\r\n  margin: 20px 0 0 450px;\r\n  position: absolute;\r\n  color: #42567a;\r\n  font-size: 20px;\r\n  font-weight: $bold;\r\n  transition: 0.3s;\r\n}\r\n\r\n.main-circle-years {\r\n  margin: -2px 0 0 2px;\r\n  letter-spacing: -3px;\r\n  left: -46%;\r\n  top: 33%;\r\n  position: absolute;\r\n  width: 973px;\r\n  font-size: 200px;\r\n  font-weight: $bold;\r\n  line-height: 160px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  z-index: -1;\r\n\r\n  .main-circle-years-first {\r\n    color: $first-year;\r\n    transition: 150ms;\r\n  }\r\n\r\n  .main-circle-years-last {\r\n    color: $last-year;\r\n    transition: 150ms;\r\n  }\r\n}\r\n\r\n.main-slider {\r\n  margin-top: 57px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n.main-slider-wrapper {\r\n  overflow: hidden;\r\n  width: 1280px;\r\n  height: 135px;\r\n  cursor: pointer;\r\n}\r\n\r\n.main-slider-items {\r\n  display: flex;\r\n}\r\n\r\n.main-slider-items-item {\r\n  margin-right: 80px;\r\n\r\n  .main-slider-items-item-head {\r\n    color: $first-year;\r\n    font-size: 25px;\r\n    font-family: Bebas Neue, serif;\r\n    font-weight: $regular;\r\n    text-transform: uppercase;\r\n    line-height: 30px;\r\n    height: 43px;\r\n    transition: 0.3s;\r\n  }\r\n\r\n  .main-slider-items-item-description {\r\n    font-size: 20px;\r\n    width: 350px;\r\n    display: inline-block;\r\n    line-height: 30px;\r\n    transition: 0.3s;\r\n  }\r\n}\r\n\r\n.main-slider-items-item:last-child {\r\n  margin-right: 0;\r\n}\r\n\r\n.main-slider-arrow-left,\r\n.main-slider-arrow-right {\r\n  width: 40px;\r\n  height: 40px;\r\n  background: none;\r\n  border: none;\r\n  box-shadow: 0 0 15px rgba(56, 119, 238, 0.1);\r\n  border-radius: 9999px;\r\n  z-index: 3;\r\n  cursor: pointer;\r\n  transition: 0.3s;\r\n}\r\n\r\n.main-slider-arrow-left:hover,\r\n.main-slider-arrow-right:hover {\r\n  background: $arr-background;\r\n}\r\n\r\n.main-slider-arrow-left {\r\n  margin: 41px 0 0 38px;\r\n}\r\n\r\n.main-slider-arrow-right {\r\n  margin: 41px 38px 0 0;\r\n}\r\n\r\n.main-slider-arrow-left img {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n@media (max-width: 1439px) {\r\n  .main {\r\n    bottom: 0;\r\n    width: 320px;\r\n    height: 568px;\r\n    margin: 0 auto;\r\n    border: none;\r\n\r\n    &:before {\r\n      margin-left: 20px;\r\n      top: 293px;\r\n      height: 2px;\r\n      width: 280px;\r\n    }\r\n\r\n    &:after {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  .main-container-title-decoration {\r\n    display: none;\r\n  }\r\n\r\n  .main-container-title-head {\r\n    width: 120px;\r\n    height: 40px;\r\n    padding: 58px 0 0 20px;\r\n    margin: 0;\r\n    font-size: 20px;\r\n    line-height: 1.2;\r\n  }\r\n\r\n  .main-container-sliderPanel {\r\n    position: absolute;\r\n    bottom: 0;\r\n    height: 66px;\r\n    margin: 0;\r\n  }\r\n\r\n  .main-container-sliderPanel-pagination {\r\n    left: 113px;\r\n    top: 28px;\r\n    width: 95px;\r\n    height: 6px;\r\n    position: absolute;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    justify-content: space-around;\r\n\r\n    .main-container-sliderPanel-pagination-bullet {\r\n      width: 6px;\r\n      height: 6px;\r\n      background: rgba(66, 86, 122, 1);\r\n      border-radius: 50%;\r\n      opacity: 0.4;\r\n      transition: 0.3s;\r\n    }\r\n  }\r\n\r\n  .main-container-sliderPanel-index {\r\n    margin: 0 0 0 20px;\r\n  }\r\n\r\n  .main-container-sliderPanel-arrows {\r\n    margin: 8px 0 0 20px;\r\n    width: 58px;\r\n\r\n    .main-container-sliderPanel-arrows-left,\r\n    .main-container-sliderPanel-arrows-right {\r\n      width: 25px;\r\n      height: 25px;\r\n    }\r\n\r\n    .main-container-sliderPanel-arrows-left img {\r\n      transform: scale(0.5);\r\n    }\r\n\r\n    .main-container-sliderPanel-arrows-right img {\r\n      transform: rotate(180deg) scale(0.5);\r\n    }\r\n  }\r\n\r\n  .main-circle {\r\n    margin-top: 93px;\r\n    width: 100%;\r\n    height: 150px;\r\n    border: none;\r\n    display: flex;\r\n    top: initial;\r\n\r\n    .main-circle-container {\r\n      width: 100%;\r\n      display: none;\r\n      position: initial;\r\n    }\r\n\r\n    .main-circle-description {\r\n      margin: 140px 0 0 20px;\r\n    }\r\n\r\n    .main-circle-years {\r\n      bottom: 0;\r\n      top: 0;\r\n      left: 0;\r\n      position: absolute;\r\n      font-size: 56px;\r\n      width: 100%;\r\n      margin: auto;\r\n      justify-content: space-evenly;\r\n      letter-spacing: -1px;\r\n    }\r\n  }\r\n\r\n  .main-slider {\r\n    margin: 210px 0 0 20px;\r\n  }\r\n\r\n  .main-slider-arrow-left,\r\n  .main-slider-arrow-right {\r\n    display: none;\r\n  }\r\n\r\n  .main-slider-wrapper {\r\n    width: 100%;\r\n  }\r\n\r\n  .main-slider-items-item {\r\n    margin-right: 25px;\r\n\r\n    .main-slider-items-item-head {\r\n      font-size: 16px;\r\n      height: 38px;\r\n    }\r\n\r\n    .main-slider-items-item-description {\r\n      width: 166px;\r\n      height: 80px;\r\n      font-size: 14px;\r\n      line-height: 20px;\r\n    }\r\n  }\r\n}\r\n',"@import \"src/style/main.scss\";\r\n\r\n* {\r\n  color: #42567A;\r\n  font-family: 'PT Sans', sans-serif;\r\n  margin: 0;\r\n}\r\n\r\nbody {\r\n  background: #F4F5F9;\r\n}\r\n\r\n::-webkit-scrollbar {\r\n  width: 0;\r\n}\r\n\r\n.hidden {\r\n  visibility: hidden;\r\n}\r\n\r\n.blocked {\r\n  opacity: 0.5;\r\n  cursor: default !important;\r\n}\r\n\r\n.blocked:hover {\r\n  background: none !important;\r\n}\r\n\r\n.current {\r\n  opacity: 1 !important;\r\n}\r\n\r\n.preload * {\r\n  -webkit-transition: none !important;\r\n  -moz-transition: none !important;\r\n  -ms-transition: none !important;\r\n  -o-transition: none !important;\r\n}\r\n"],sourceRoot:""}]);const o=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,i,s){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(n)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(a[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);n&&a[c[0]]||(void 0!==s&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=s),r&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=r):c[2]=r),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),s="/*# ".concat(i," */");return[t].concat([s]).join("\n")}return[t].join("\n")}},440:e=>{e.exports={Астрономия:{1961:"Ю. А. Гагарин совершил первый орбитальный полет и стал первым человеком в космосе.",1969:"Астронавты Армстронг, Олдрин и Коллинз совершили первую экспедицию на Луну на «Аполлон-11».",1990:"Запущен космический телескоп «Хаббл», названный в астрофизика и космолога честь Эдвина Хаббла.",2004:"Марсоход «Спирит» совершил мягкую посадку на Марс за три недели до марсохода «Оппортьюнити».",2013:"Многоразовая ракета-носитель «Фалкон 9» совершила пять успешных взлетов и посадок.",2022:"Зонд «Дарт» столкнулся с астероидом Диморфом, тестируя стратегию защиты Земли."},Биология:{1676:"Антони ван Левенгук микроскопировал каплю воды, обнаружив бактерии и впервые увидев микромир.",1895:"Вильгельмом Рентгеном сделан первый рентгеновский снимок, засняв кисть руки своей жены. ",1928:"Александр Флеминг создал первый антибиотик известный как «Пенициллин».",1967:"Кристиан Барнард произвел первую пересадку сердца от человека к человеку.",1996:"Родилась овца Долли, первое клонированное млекопитающее от одного родителя.",2022:"За 32 года работы биологи расшифровали 100% генома человека."},Математика:{1545:"Геронимо Кардано опубликовал 'Арс магни', включая методы решения кубических уравнений.",1643:"Рене Декарт ввел координатную систему, объединив математику и геометрию.",1900:"Давид Гильберт опубликовал список 23 нерешенных математических задач, известных как Гильбертовы проблемы.",1936:"Алан Тьюринг предложил модель универсальной машины, предшествующей компьютерам.",1994:"Эндрю Уайлс доказал последнюю теорему Ферма.",2013:"Михаэль Грюберман и Томас Халдейн разгадали гипотезу Шварца–Ципфа в теории чисел."},Интернет:{1969:"Создание «ARPANET», первой сети, ставшей основой для интернета.",1971:"Рэй Томлинсон разработал первую программу электронной почты.",1983:"Введена система доменных имен DNS, что упростило адресацию в сети.",1991:"Тим Бернерс-Ли представил World Wide Web, что стало основой современного интернета.",2004:"Марк Цукерберг запустил Facebook, став одной из крупнейших социальных сетей.",2021:"Биткоин достиг рекордной стоимости, подчеркивая рост интереса к криптовалютам."},Физика:{1687:"Исаак Ньютон опубликовал 'Математические начала натуральной философии', сформулировав законы движения и гравитации.",1905:"Альберт Эйнштейн представил теорию относительности, специальную и общую.",1927:"Вернер Хейзенберг сформулировал принцип неопределенности, основу квантовой механики.",1932:"Джеймс Чедвик обнаружил нейтрино, электронное нейтральное элементарное частицу.",1965:"Арно Пензиас и Роберт Уилсон обнаружили космическое микроволновое излучение, подтверждая теорию большого взрыва.",2012:"Обнаружение бозона Хиггса в ЦЕРНе подтвердило существование элементарных частиц."},Химия:{1774:"Джозеф Простер создал флогистоновую теорию, одну из первых теорий о химических реакциях.",1869:"Дмитрий Менделеев представил таблицу химических элементов, предшествующую периодической таблице.",1907:"Химики Георгий Урбайн и Чарльз Видерс создали ниобий и тантал, обнаружив их одновременно и независимо друг от друга.",1953:"Джеймс Уотсон и Фрэнсис Крик описали структуру ДНК, открывая секреты нашего генетического кода.",2016:"Исследователи создали периодическую систему элементов, включающую 118 элементов.",2020:"Химики синтезировали элемент 118 в ядерной реакции, подтвердив его существование в периодической системе."}}},59:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>g});var n=r(379),i=r.n(n),s=r(795),a=r.n(s),o=r(569),l=r.n(o),d=r(565),c=r.n(d),p=r(216),A=r.n(p),u=r(589),m=r.n(u),h=r(460),f={};f.styleTagTransform=m(),f.setAttributes=c(),f.insert=l().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=A(),i()(h.Z,f);const g=h.Z&&h.Z.locals?h.Z.locals:void 0},379:e=>{"use strict";var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var s={},a=[],o=0;o<e.length;o++){var l=e[o],d=n.base?l[0]+n.base:l[0],c=s[d]||0,p="".concat(d," ").concat(c);s[d]=c+1;var A=r(p),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(u);else{var m=i(u,n);n.byIndex=o,t.splice(o,0,{identifier:p,updater:m,references:1})}a.push(p)}return a}function i(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,i){var s=n(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<s.length;a++){var o=r(s[a]);t[o].references--}for(var l=n(e,i),d=0;d<s.length;d++){var c=r(s[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}s=l}}},569:e=>{"use strict";var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{"use strict";e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var i=void 0!==r.layer;i&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,i&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var s=r.sourceMap;s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},215:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,i)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.rotateCircle=t.updateContent=void 0;const a=s(r(440)),o=r(712),l=r(765),d=r(48),c=a,p=document.getElementsByClassName("main-circle-point-index"),A=document.getElementsByClassName("main-slider-items-item");function u(e){let t=0;const r=document.getElementsByClassName(e)[0].innerHTML,n=Object.keys(c)[+r-1],i=document.getElementsByClassName("main-circle-description")[0],s=document.getElementsByClassName("main-circle-years-first")[0],a=document.getElementsByClassName("main-circle-years-last")[0];for(const e of A){const r=e.children[0],i=e.children[1];r.style.opacity="0",i.style.opacity="0",setTimeout((()=>{d.swiper.slideTo(0,0),r.innerHTML=Object.keys(c[n])[t],i.innerHTML=c[n][Object.keys(c[n])[t]],r.style.opacity="1",i.style.opacity="1",t+=1}),300)}(0,l.yearsAnimation)(s,+Object.keys(c[n])[0]),(0,l.yearsAnimation)(a,+Object.keys(c[n])[5]),i.style.opacity="0",setTimeout((()=>{i.innerHTML=Object.keys(c)[+r-1],i.style.opacity="1"}),150)}function m(e){const t=document.getElementsByClassName("main-circle-container")[0],r=document.getElementsByClassName(e)[0];t.style.transform=`rotate(${e.split(".")[0]}deg)`;for(const t of p)t.classList.remove("active"),t.style.transform=`rotate(${e.split(".")[1]}deg)`;r.classList.add("active"),document.getElementsByClassName("main-container-sliderPanel-index")[0].innerHTML=`0${r.innerHTML}/06`;const n=document.getElementsByClassName("main-container-sliderPanel-arrows-left")[0],i=document.getElementsByClassName("main-container-sliderPanel-arrows-right")[0];"1"===r.classList[2]?(n.classList.add("blocked"),i.classList.remove("blocked")):"6"===r.classList[2]?(n.classList.remove("blocked"),i.classList.add("blocked")):(i.classList.remove("blocked"),n.classList.remove("blocked")),(0,o.handleClick)(+document.getElementsByClassName(e)[0].classList[2]-1),u(e)}t.updateContent=u,t.rotateCircle=m;for(const e of p)e.addEventListener("click",(()=>{m(e.classList[1])}))},712:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.handleClick=void 0;const n=r(215),i=document.querySelectorAll(".main-container-sliderPanel-pagination-bullet");function s(e){const t=document.getElementsByClassName("main-container-sliderPanel-arrows-left")[0],r=document.getElementsByClassName("main-container-sliderPanel-arrows-right")[0];0===e?(t.classList.add("blocked"),r.classList.remove("blocked")):5===e?(t.classList.remove("blocked"),r.classList.add("blocked")):(r.classList.remove("blocked"),t.classList.remove("blocked")),i.forEach((e=>{e.classList.remove("current")})),i[e].classList.add("current"),document.getElementsByClassName("main-container-sliderPanel-index")[0].innerHTML=`0${e+1}/06`}t.handleClick=s,i.forEach(((e,t)=>{e.addEventListener("click",(()=>{s(t),(0,n.updateContent)(`${t+1}`)}))}))},48:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.swiper=void 0;const n=r(228),i=document.querySelector(".main-slider-wrapper");t.swiper=new n.Swiper(i,{breakpoints:{1439:{slidesPerView:3},320:{slidesPerView:1.6}}});const s=document.getElementsByClassName("main-slider-arrow-left")[0],a=document.getElementsByClassName("main-slider-arrow-right")[0];function o(e){"main-slider-arrow-right"===e.currentTarget.classList[0]?t.swiper.slideNext(500):t.swiper.slidePrev(500)}t.swiper.on("slideChangeTransitionEnd",(()=>{t.swiper.isBeginning?s.classList.add("hidden"):s.classList.remove("hidden"),t.swiper.isEnd?a.classList.add("hidden"):a.classList.remove("hidden")})),s.addEventListener("click",(e=>o(e))),a.addEventListener("click",(e=>o(e)))},691:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(215);function i(e){const t=document.getElementsByClassName("main-container-sliderPanel-index")[0].innerHTML,r=document.getElementsByClassName("main-container-sliderPanel-arrows-left")[0],i=document.getElementsByClassName("main-container-sliderPanel-arrows-right")[0];if(e.target instanceof HTMLElement){if(e.target.classList.contains("blocked")||e.target.parentElement.classList.contains("blocked"))return;e.target.classList.contains("main-container-sliderPanel-arrows-right")||e.target.parentElement.classList.contains("main-container-sliderPanel-arrows-right")?(0,n.rotateCircle)(document.getElementsByClassName(""+(+t[1]+1))[0].classList[1]):(0,n.rotateCircle)(document.getElementsByClassName(""+(+t[1]-1))[0].classList[1]),"02/06"===t&&e.target===r||"02/06"===t&&e.target.parentElement!==r?r.classList.add("blocked"):"05/06"===t&&e.target===i||"05/06"===t&&e.target.parentElement===i?i.classList.add("blocked"):(r.classList.remove("blocked"),i.classList.remove("blocked"))}}document.getElementsByClassName("main-container-sliderPanel-arrows-left")[0].addEventListener("click",(e=>{i(e)})),document.getElementsByClassName("main-container-sliderPanel-arrows-right")[0].addEventListener("click",(e=>{i(e)}))},765:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.yearsAnimation=void 0,t.yearsAnimation=function(e,t){const r=+e.innerHTML,n=t-r,i=n>0?Math.ceil(n/10):Math.floor(n/10);let s=setInterval((()=>{i>0&&+e.innerHTML>=t||i<0&&+e.innerHTML<=t?(e.innerHTML=t+"",clearInterval(s)):e.innerHTML=+e.innerHTML+i+""}),25)}},228:(e,t,r)=>{"use strict";function n(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function i(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((r=>{void 0===e[r]?e[r]=t[r]:n(t[r])&&n(e[r])&&Object.keys(t[r]).length>0&&i(e[r],t[r])}))}r.r(t),r.d(t,{Swiper:()=>Y,default:()=>Y});const s={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function a(){const e="undefined"!=typeof document?document:{};return i(e,s),e}const o={document:s,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function l(){const e="undefined"!=typeof window?window:{};return i(e,o),e}function d(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function c(){return Date.now()}function p(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function A(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let n=1;n<arguments.length;n+=1){const i=n<0||arguments.length<=n?void 0:arguments[n];if(null!=i&&(r=i,!("undefined"!=typeof window&&void 0!==window.HTMLElement?r instanceof HTMLElement:r&&(1===r.nodeType||11===r.nodeType)))){const r=Object.keys(Object(i)).filter((e=>t.indexOf(e)<0));for(let t=0,n=r.length;t<n;t+=1){const n=r[t],s=Object.getOwnPropertyDescriptor(i,n);void 0!==s&&s.enumerable&&(p(e[n])&&p(i[n])?i[n].__swiper__?e[n]=i[n]:A(e[n],i[n]):!p(e[n])&&p(i[n])?(e[n]={},i[n].__swiper__?e[n]=i[n]:A(e[n],i[n])):e[n]=i[n])}}}var r;return e}function u(e,t,r){e.style.setProperty(t,r)}function m(e){let{swiper:t,targetPosition:r,side:n}=e;const i=l(),s=-t.translate;let a,o=null;const d=t.params.speed;t.wrapperEl.style.scrollSnapType="none",i.cancelAnimationFrame(t.cssModeFrameID);const c=r>s?"next":"prev",p=(e,t)=>"next"===c&&e>=t||"prev"===c&&e<=t,A=()=>{a=(new Date).getTime(),null===o&&(o=a);const e=Math.max(Math.min((a-o)/d,1),0),l=.5-Math.cos(e*Math.PI)/2;let c=s+l*(r-s);if(p(c,r)&&(c=r),t.wrapperEl.scrollTo({[n]:c}),p(c,r))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[n]:c})})),void i.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=i.requestAnimationFrame(A)};A()}function h(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function f(e,t){return l().getComputedStyle(e,null).getPropertyValue(t)}function g(e){let t,r=e;if(r){for(t=0;null!==(r=r.previousSibling);)1===r.nodeType&&(t+=1);return t}}function C(e,t,r){const n=l();return r?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(n.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(n.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}let v,w,x;function b(){return v||(v=function(){const e=l(),t=a();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),v}var y={on(e,t,r){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof t)return n;const i=r?"unshift":"push";return e.split(" ").forEach((e=>{n.eventsListeners[e]||(n.eventsListeners[e]=[]),n.eventsListeners[e][i](t)})),n},once(e,t,r){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof t)return n;function i(){n.off(e,i),i.__emitterProxy&&delete i.__emitterProxy;for(var r=arguments.length,s=new Array(r),a=0;a<r;a++)s[a]=arguments[a];t.apply(n,s)}return i.__emitterProxy=t,n.on(e,i,r)},onAny(e,t){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof e)return r;const n=t?"unshift":"push";return r.eventsAnyListeners.indexOf(e)<0&&r.eventsAnyListeners[n](e),r},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const r=t.eventsAnyListeners.indexOf(e);return r>=0&&t.eventsAnyListeners.splice(r,1),t},off(e,t){const r=this;return!r.eventsListeners||r.destroyed?r:r.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?r.eventsListeners[e]=[]:r.eventsListeners[e]&&r.eventsListeners[e].forEach(((n,i)=>{(n===t||n.__emitterProxy&&n.__emitterProxy===t)&&r.eventsListeners[e].splice(i,1)}))})),r):r},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,r,n;for(var i=arguments.length,s=new Array(i),a=0;a<i;a++)s[a]=arguments[a];return"string"==typeof s[0]||Array.isArray(s[0])?(t=s[0],r=s.slice(1,s.length),n=e):(t=s[0].events,r=s[0].data,n=s[0].context||e),r.unshift(n),(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(n,[t,...r])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(n,r)}))})),e}};const E=(e,t)=>{if(!e||e.destroyed||!e.params)return;const r=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(r){let t=r.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(r.shadowRoot?t=r.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{r.shadowRoot&&(t=r.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},S=(e,t)=>{if(!e.slides[t])return;const r=e.slides[t].querySelector('[loading="lazy"]');r&&r.removeAttribute("loading")},T=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const r=e.slides.length;if(!r||!t||t<0)return;t=Math.min(t,r);const n="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),i=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const r=i,s=[r-t];return s.push(...Array.from({length:t}).map(((e,t)=>r+n+t))),void e.slides.forEach(((t,r)=>{s.includes(t.column)&&S(e,r)}))}const s=i+n-1;if(e.params.rewind||e.params.loop)for(let n=i-t;n<=s+t;n+=1){const t=(n%r+r)%r;(t<i||t>s)&&S(e,t)}else for(let n=Math.max(i-t,0);n<=Math.min(s+t,r-1);n+=1)n!==i&&(n>s||n<i)&&S(e,n)};var P={updateSize:function(){const e=this;let t,r;const n=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:n.clientWidth,r=void 0!==e.params.height&&null!==e.params.height?e.params.height:n.clientHeight,0===t&&e.isHorizontal()||0===r&&e.isVertical()||(t=t-parseInt(f(n,"padding-left")||0,10)-parseInt(f(n,"padding-right")||0,10),r=r-parseInt(f(n,"padding-top")||0,10)-parseInt(f(n,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(r)&&(r=0),Object.assign(e,{width:t,height:r,size:e.isHorizontal()?t:r}))},updateSlides:function(){const e=this;function t(t){return e.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}function r(e,r){return parseFloat(e.getPropertyValue(t(r))||0)}const n=e.params,{wrapperEl:i,slidesEl:s,size:a,rtlTranslate:o,wrongRTL:l}=e,d=e.virtual&&n.virtual.enabled,c=d?e.virtual.slides.length:e.slides.length,p=h(s,`.${e.params.slideClass}, swiper-slide`),A=d?e.virtual.slides.length:p.length;let m=[];const g=[],v=[];let w=n.slidesOffsetBefore;"function"==typeof w&&(w=n.slidesOffsetBefore.call(e));let x=n.slidesOffsetAfter;"function"==typeof x&&(x=n.slidesOffsetAfter.call(e));const b=e.snapGrid.length,y=e.slidesGrid.length;let E=n.spaceBetween,S=-w,T=0,P=0;if(void 0===a)return;"string"==typeof E&&E.indexOf("%")>=0?E=parseFloat(E.replace("%",""))/100*a:"string"==typeof E&&(E=parseFloat(E)),e.virtualSize=-E,p.forEach((e=>{o?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),n.centeredSlides&&n.cssMode&&(u(i,"--swiper-centered-offset-before",""),u(i,"--swiper-centered-offset-after",""));const M=n.grid&&n.grid.rows>1&&e.grid;let k;M&&e.grid.initSlides(A);const L="auto"===n.slidesPerView&&n.breakpoints&&Object.keys(n.breakpoints).filter((e=>void 0!==n.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<A;i+=1){let s;if(k=0,p[i]&&(s=p[i]),M&&e.grid.updateSlide(i,s,A,t),!p[i]||"none"!==f(s,"display")){if("auto"===n.slidesPerView){L&&(p[i].style[t("width")]="");const a=getComputedStyle(s),o=s.style.transform,l=s.style.webkitTransform;if(o&&(s.style.transform="none"),l&&(s.style.webkitTransform="none"),n.roundLengths)k=e.isHorizontal()?C(s,"width",!0):C(s,"height",!0);else{const e=r(a,"width"),t=r(a,"padding-left"),n=r(a,"padding-right"),i=r(a,"margin-left"),o=r(a,"margin-right"),l=a.getPropertyValue("box-sizing");if(l&&"border-box"===l)k=e+i+o;else{const{clientWidth:r,offsetWidth:a}=s;k=e+t+n+i+o+(a-r)}}o&&(s.style.transform=o),l&&(s.style.webkitTransform=l),n.roundLengths&&(k=Math.floor(k))}else k=(a-(n.slidesPerView-1)*E)/n.slidesPerView,n.roundLengths&&(k=Math.floor(k)),p[i]&&(p[i].style[t("width")]=`${k}px`);p[i]&&(p[i].swiperSlideSize=k),v.push(k),n.centeredSlides?(S=S+k/2+T/2+E,0===T&&0!==i&&(S=S-a/2-E),0===i&&(S=S-a/2-E),Math.abs(S)<.001&&(S=0),n.roundLengths&&(S=Math.floor(S)),P%n.slidesPerGroup==0&&m.push(S),g.push(S)):(n.roundLengths&&(S=Math.floor(S)),(P-Math.min(e.params.slidesPerGroupSkip,P))%e.params.slidesPerGroup==0&&m.push(S),g.push(S),S=S+k+E),e.virtualSize+=k+E,T=k,P+=1}}if(e.virtualSize=Math.max(e.virtualSize,a)+x,o&&l&&("slide"===n.effect||"coverflow"===n.effect)&&(i.style.width=`${e.virtualSize+E}px`),n.setWrapperSize&&(i.style[t("width")]=`${e.virtualSize+E}px`),M&&e.grid.updateWrapperSize(k,m,t),!n.centeredSlides){const t=[];for(let r=0;r<m.length;r+=1){let i=m[r];n.roundLengths&&(i=Math.floor(i)),m[r]<=e.virtualSize-a&&t.push(i)}m=t,Math.floor(e.virtualSize-a)-Math.floor(m[m.length-1])>1&&m.push(e.virtualSize-a)}if(d&&n.loop){const t=v[0]+E;if(n.slidesPerGroup>1){const r=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/n.slidesPerGroup),i=t*n.slidesPerGroup;for(let e=0;e<r;e+=1)m.push(m[m.length-1]+i)}for(let r=0;r<e.virtual.slidesBefore+e.virtual.slidesAfter;r+=1)1===n.slidesPerGroup&&m.push(m[m.length-1]+t),g.push(g[g.length-1]+t),e.virtualSize+=t}if(0===m.length&&(m=[0]),0!==E){const r=e.isHorizontal()&&o?"marginLeft":t("marginRight");p.filter(((e,t)=>!(n.cssMode&&!n.loop)||t!==p.length-1)).forEach((e=>{e.style[r]=`${E}px`}))}if(n.centeredSlides&&n.centeredSlidesBounds){let e=0;v.forEach((t=>{e+=t+(E||0)})),e-=E;const t=e-a;m=m.map((e=>e<=0?-w:e>t?t+x:e))}if(n.centerInsufficientSlides){let e=0;if(v.forEach((t=>{e+=t+(E||0)})),e-=E,e<a){const t=(a-e)/2;m.forEach(((e,r)=>{m[r]=e-t})),g.forEach(((e,r)=>{g[r]=e+t}))}}if(Object.assign(e,{slides:p,snapGrid:m,slidesGrid:g,slidesSizesGrid:v}),n.centeredSlides&&n.cssMode&&!n.centeredSlidesBounds){u(i,"--swiper-centered-offset-before",-m[0]+"px"),u(i,"--swiper-centered-offset-after",e.size/2-v[v.length-1]/2+"px");const t=-e.snapGrid[0],r=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+r))}if(A!==c&&e.emit("slidesLengthChange"),m.length!==b&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),g.length!==y&&e.emit("slidesGridLengthChange"),n.watchSlidesProgress&&e.updateSlidesOffset(),!(d||n.cssMode||"slide"!==n.effect&&"fade"!==n.effect)){const t=`${n.containerModifierClass}backface-hidden`,r=e.el.classList.contains(t);A<=n.maxBackfaceHiddenSlides?r||e.el.classList.add(t):r&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,r=[],n=t.virtual&&t.params.virtual.enabled;let i,s=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const a=e=>n?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{r.push(e)}));else for(i=0;i<Math.ceil(t.params.slidesPerView);i+=1){const e=t.activeIndex+i;if(e>t.slides.length&&!n)break;r.push(a(e))}else r.push(a(t.activeIndex));for(i=0;i<r.length;i+=1)if(void 0!==r[i]){const e=r[i].offsetHeight;s=e>s?e:s}(s||0===s)&&(t.wrapperEl.style.height=`${s}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,r=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let n=0;n<t.length;n+=1)t[n].swiperSlideOffset=(e.isHorizontal()?t[n].offsetLeft:t[n].offsetTop)-r-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,r=t.params,{slides:n,rtlTranslate:i,snapGrid:s}=t;if(0===n.length)return;void 0===n[0].swiperSlideOffset&&t.updateSlidesOffset();let a=-e;i&&(a=e),n.forEach((e=>{e.classList.remove(r.slideVisibleClass)})),t.visibleSlidesIndexes=[],t.visibleSlides=[];let o=r.spaceBetween;"string"==typeof o&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*t.size:"string"==typeof o&&(o=parseFloat(o));for(let e=0;e<n.length;e+=1){const l=n[e];let d=l.swiperSlideOffset;r.cssMode&&r.centeredSlides&&(d-=n[0].swiperSlideOffset);const c=(a+(r.centeredSlides?t.minTranslate():0)-d)/(l.swiperSlideSize+o),p=(a-s[0]+(r.centeredSlides?t.minTranslate():0)-d)/(l.swiperSlideSize+o),A=-(a-d),u=A+t.slidesSizesGrid[e];(A>=0&&A<t.size-1||u>1&&u<=t.size||A<=0&&u>=t.size)&&(t.visibleSlides.push(l),t.visibleSlidesIndexes.push(e),n[e].classList.add(r.slideVisibleClass)),l.progress=i?-c:c,l.originalProgress=i?-p:p}},updateProgress:function(e){const t=this;if(void 0===e){const r=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*r||0}const r=t.params,n=t.maxTranslate()-t.minTranslate();let{progress:i,isBeginning:s,isEnd:a,progressLoop:o}=t;const l=s,d=a;if(0===n)i=0,s=!0,a=!0;else{i=(e-t.minTranslate())/n;const r=Math.abs(e-t.minTranslate())<1,o=Math.abs(e-t.maxTranslate())<1;s=r||i<=0,a=o||i>=1,r&&(i=0),o&&(i=1)}if(r.loop){const r=t.getSlideIndexByData(0),n=t.getSlideIndexByData(t.slides.length-1),i=t.slidesGrid[r],s=t.slidesGrid[n],a=t.slidesGrid[t.slidesGrid.length-1],l=Math.abs(e);o=l>=i?(l-i)/a:(l+a-s)/a,o>1&&(o-=1)}Object.assign(t,{progress:i,progressLoop:o,isBeginning:s,isEnd:a}),(r.watchSlidesProgress||r.centeredSlides&&r.autoHeight)&&t.updateSlidesProgress(e),s&&!l&&t.emit("reachBeginning toEdge"),a&&!d&&t.emit("reachEnd toEdge"),(l&&!s||d&&!a)&&t.emit("fromEdge"),t.emit("progress",i)},updateSlidesClasses:function(){const e=this,{slides:t,params:r,slidesEl:n,activeIndex:i}=e,s=e.virtual&&r.virtual.enabled,a=e=>h(n,`.${r.slideClass}${e}, swiper-slide${e}`)[0];let o;if(t.forEach((e=>{e.classList.remove(r.slideActiveClass,r.slideNextClass,r.slidePrevClass)})),s)if(r.loop){let t=i-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),o=a(`[data-swiper-slide-index="${t}"]`)}else o=a(`[data-swiper-slide-index="${i}"]`);else o=t[i];if(o){o.classList.add(r.slideActiveClass);let e=function(e,t){const r=[];for(;e.nextElementSibling;){const n=e.nextElementSibling;t?n.matches(t)&&r.push(n):r.push(n),e=n}return r}(o,`.${r.slideClass}, swiper-slide`)[0];r.loop&&!e&&(e=t[0]),e&&e.classList.add(r.slideNextClass);let n=function(e,t){const r=[];for(;e.previousElementSibling;){const n=e.previousElementSibling;t?n.matches(t)&&r.push(n):r.push(n),e=n}return r}(o,`.${r.slideClass}, swiper-slide`)[0];r.loop&&0===!n&&(n=t[t.length-1]),n&&n.classList.add(r.slidePrevClass)}e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,r=t.rtlTranslate?t.translate:-t.translate,{snapGrid:n,params:i,activeIndex:s,realIndex:a,snapIndex:o}=t;let l,d=e;const c=e=>{let r=e-t.virtual.slidesBefore;return r<0&&(r=t.virtual.slides.length+r),r>=t.virtual.slides.length&&(r-=t.virtual.slides.length),r};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:r}=e,n=e.rtlTranslate?e.translate:-e.translate;let i;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?n>=t[e]&&n<t[e+1]-(t[e+1]-t[e])/2?i=e:n>=t[e]&&n<t[e+1]&&(i=e+1):n>=t[e]&&(i=e);return r.normalizeSlideIndex&&(i<0||void 0===i)&&(i=0),i}(t)),n.indexOf(r)>=0)l=n.indexOf(r);else{const e=Math.min(i.slidesPerGroupSkip,d);l=e+Math.floor((d-e)/i.slidesPerGroup)}if(l>=n.length&&(l=n.length-1),d===s)return l!==o&&(t.snapIndex=l,t.emit("snapIndexChange")),void(t.params.loop&&t.virtual&&t.params.virtual.enabled&&(t.realIndex=c(d)));let p;p=t.virtual&&i.virtual.enabled&&i.loop?c(d):t.slides[d]?parseInt(t.slides[d].getAttribute("data-swiper-slide-index")||d,10):d,Object.assign(t,{previousSnapIndex:o,snapIndex:l,previousRealIndex:a,realIndex:p,previousIndex:s,activeIndex:d}),t.initialized&&T(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(a!==p&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const r=this,n=r.params;let i=e.closest(`.${n.slideClass}, swiper-slide`);!i&&r.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!i&&e.matches&&e.matches(`.${n.slideClass}, swiper-slide`)&&(i=e)}));let s,a=!1;if(i)for(let e=0;e<r.slides.length;e+=1)if(r.slides[e]===i){a=!0,s=e;break}if(!i||!a)return r.clickedSlide=void 0,void(r.clickedIndex=void 0);r.clickedSlide=i,r.virtual&&r.params.virtual.enabled?r.clickedIndex=parseInt(i.getAttribute("data-swiper-slide-index"),10):r.clickedIndex=s,n.slideToClickedSlide&&void 0!==r.clickedIndex&&r.clickedIndex!==r.activeIndex&&r.slideToClickedSlide()}};function M(e){let{swiper:t,runCallbacks:r,direction:n,step:i}=e;const{activeIndex:s,previousIndex:a}=t;let o=n;if(o||(o=s>a?"next":s<a?"prev":"reset"),t.emit(`transition${i}`),r&&s!==a){if("reset"===o)return void t.emit(`slideResetTransition${i}`);t.emit(`slideChangeTransition${i}`),"next"===o?t.emit(`slideNextTransition${i}`):t.emit(`slidePrevTransition${i}`)}}var k={slideTo:function(e,t,r,n,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===r&&(r=!0),"string"==typeof e&&(e=parseInt(e,10));const s=this;let a=e;a<0&&(a=0);const{params:o,snapGrid:l,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:A,wrapperEl:u,enabled:h}=s;if(s.animating&&o.preventInteractionOnTransition||!h&&!n&&!i)return!1;const f=Math.min(s.params.slidesPerGroupSkip,a);let g=f+Math.floor((a-f)/s.params.slidesPerGroup);g>=l.length&&(g=l.length-1);const C=-l[g];if(o.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*C),r=Math.floor(100*d[e]),n=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=r&&t<n-(n-r)/2?a=e:t>=r&&t<n&&(a=e+1):t>=r&&(a=e)}if(s.initialized&&a!==p){if(!s.allowSlideNext&&(A?C>s.translate&&C>s.minTranslate():C<s.translate&&C<s.minTranslate()))return!1;if(!s.allowSlidePrev&&C>s.translate&&C>s.maxTranslate()&&(p||0)!==a)return!1}let v;if(a!==(c||0)&&r&&s.emit("beforeSlideChangeStart"),s.updateProgress(C),v=a>p?"next":a<p?"prev":"reset",A&&-C===s.translate||!A&&C===s.translate)return s.updateActiveIndex(a),o.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),"slide"!==o.effect&&s.setTranslate(C),"reset"!==v&&(s.transitionStart(r,v),s.transitionEnd(r,v)),!1;if(o.cssMode){const e=s.isHorizontal(),r=A?C:-C;if(0===t){const t=s.virtual&&s.params.virtual.enabled;t&&(s.wrapperEl.style.scrollSnapType="none",s._immediateVirtual=!0),t&&!s._cssModeVirtualInitialSet&&s.params.initialSlide>0?(s._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{u[e?"scrollLeft":"scrollTop"]=r}))):u[e?"scrollLeft":"scrollTop"]=r,t&&requestAnimationFrame((()=>{s.wrapperEl.style.scrollSnapType="",s._immediateVirtual=!1}))}else{if(!s.support.smoothScroll)return m({swiper:s,targetPosition:r,side:e?"left":"top"}),!0;u.scrollTo({[e?"left":"top"]:r,behavior:"smooth"})}return!0}return s.setTransition(t),s.setTranslate(C),s.updateActiveIndex(a),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,n),s.transitionStart(r,v),0===t?s.transitionEnd(r,v):s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.wrapperEl.removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(r,v))}),s.wrapperEl.addEventListener("transitionend",s.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,r,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===r&&(r=!0),"string"==typeof e&&(e=parseInt(e,10));const i=this;let s=e;return i.params.loop&&(i.virtual&&i.params.virtual.enabled?s+=i.virtual.slidesBefore:s=i.getSlideIndexByData(s)),i.slideTo(s,t,r,n)},slideNext:function(e,t,r){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const n=this,{enabled:i,params:s,animating:a}=n;if(!i)return n;let o=s.slidesPerGroup;"auto"===s.slidesPerView&&1===s.slidesPerGroup&&s.slidesPerGroupAuto&&(o=Math.max(n.slidesPerViewDynamic("current",!0),1));const l=n.activeIndex<s.slidesPerGroupSkip?1:o,d=n.virtual&&s.virtual.enabled;if(s.loop){if(a&&!d&&s.loopPreventsSliding)return!1;if(n.loopFix({direction:"next"}),n._clientLeft=n.wrapperEl.clientLeft,n.activeIndex===n.slides.length-1&&s.cssMode)return requestAnimationFrame((()=>{n.slideTo(n.activeIndex+l)})),!0}return s.rewind&&n.isEnd?n.slideTo(0,e,t,r):n.slideTo(n.activeIndex+l)},slidePrev:function(e,t,r){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const n=this,{params:i,snapGrid:s,slidesGrid:a,rtlTranslate:o,enabled:l,animating:d}=n;if(!l)return n;const c=n.virtual&&i.virtual.enabled;if(i.loop){if(d&&!c&&i.loopPreventsSliding)return!1;n.loopFix({direction:"prev"}),n._clientLeft=n.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const A=p(o?n.translate:-n.translate),u=s.map((e=>p(e)));let m=s[u.indexOf(A)-1];if(void 0===m&&i.cssMode){let e;s.forEach(((t,r)=>{A>=t&&(e=r)})),void 0!==e&&(m=s[e>0?e-1:e])}let h=0;if(void 0!==m&&(h=a.indexOf(m),h<0&&(h=n.activeIndex-1),"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(h=h-n.slidesPerViewDynamic("previous",!0)+1,h=Math.max(h,0))),i.rewind&&n.isBeginning){const i=n.params.virtual&&n.params.virtual.enabled&&n.virtual?n.virtual.slides.length-1:n.slides.length-1;return n.slideTo(i,e,t,r)}return i.loop&&0===n.activeIndex&&i.cssMode?(requestAnimationFrame((()=>{n.slideTo(h,e,t,r)})),!0):n.slideTo(h,e,t,r)},slideReset:function(e,t,r){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,r)},slideToClosest:function(e,t,r,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===n&&(n=.5);const i=this;let s=i.activeIndex;const a=Math.min(i.params.slidesPerGroupSkip,s),o=a+Math.floor((s-a)/i.params.slidesPerGroup),l=i.rtlTranslate?i.translate:-i.translate;if(l>=i.snapGrid[o]){const e=i.snapGrid[o];l-e>(i.snapGrid[o+1]-e)*n&&(s+=i.params.slidesPerGroup)}else{const e=i.snapGrid[o-1];l-e<=(i.snapGrid[o]-e)*n&&(s-=i.params.slidesPerGroup)}return s=Math.max(s,0),s=Math.min(s,i.slidesGrid.length-1),i.slideTo(s,e,t,r)},slideToClickedSlide:function(){const e=this,{params:t,slidesEl:r}=e,n="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let i,s=e.clickedIndex;const a=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;i=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?s<e.loopedSlides-n/2||s>e.slides.length-e.loopedSlides+n/2?(e.loopFix(),s=e.getSlideIndex(h(r,`${a}[data-swiper-slide-index="${i}"]`)[0]),d((()=>{e.slideTo(s)}))):e.slideTo(s):s>e.slides.length-n?(e.loopFix(),s=e.getSlideIndex(h(r,`${a}[data-swiper-slide-index="${i}"]`)[0]),d((()=>{e.slideTo(s)}))):e.slideTo(s)}else e.slideTo(s)}};function L(e){const t=this,r=a(),n=l(),i=t.touchEventsData;i.evCache.push(e);const{params:s,touches:o,enabled:d}=t;if(!d)return;if(!s.simulateTouch&&"mouse"===e.pointerType)return;if(t.animating&&s.preventInteractionOnTransition)return;!t.animating&&s.cssMode&&s.loop&&t.loopFix();let p=e;p.originalEvent&&(p=p.originalEvent);let A=p.target;if("wrapper"===s.touchEventsTarget&&!t.wrapperEl.contains(A))return;if("which"in p&&3===p.which)return;if("button"in p&&p.button>0)return;if(i.isTouched&&i.isMoved)return;const u=!!s.noSwipingClass&&""!==s.noSwipingClass,m=e.composedPath?e.composedPath():e.path;u&&p.target&&p.target.shadowRoot&&m&&(A=m[0]);const h=s.noSwipingSelector?s.noSwipingSelector:`.${s.noSwipingClass}`,f=!(!p.target||!p.target.shadowRoot);if(s.noSwiping&&(f?function(e,t){return void 0===t&&(t=this),function t(r){if(!r||r===a()||r===l())return null;r.assignedSlot&&(r=r.assignedSlot);const n=r.closest(e);return n||r.getRootNode?n||t(r.getRootNode().host):null}(t)}(h,A):A.closest(h)))return void(t.allowClick=!0);if(s.swipeHandler&&!A.closest(s.swipeHandler))return;o.currentX=p.pageX,o.currentY=p.pageY;const g=o.currentX,C=o.currentY,v=s.edgeSwipeDetection||s.iOSEdgeSwipeDetection,w=s.edgeSwipeThreshold||s.iOSEdgeSwipeThreshold;if(v&&(g<=w||g>=n.innerWidth-w)){if("prevent"!==v)return;e.preventDefault()}Object.assign(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=g,o.startY=C,i.touchStartTime=c(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,s.threshold>0&&(i.allowThresholdMove=!1);let x=!0;A.matches(i.focusableElements)&&(x=!1,"SELECT"===A.nodeName&&(i.isTouched=!1)),r.activeElement&&r.activeElement.matches(i.focusableElements)&&r.activeElement!==A&&r.activeElement.blur();const b=x&&t.allowTouchMove&&s.touchStartPreventDefault;!s.touchStartForcePreventDefault&&!b||A.isContentEditable||p.preventDefault(),s.freeMode&&s.freeMode.enabled&&t.freeMode&&t.animating&&!s.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",p)}function B(e){const t=a(),r=this,n=r.touchEventsData,{params:i,touches:s,rtlTranslate:o,enabled:l}=r;if(!l)return;if(!i.simulateTouch&&"mouse"===e.pointerType)return;let d=e;if(d.originalEvent&&(d=d.originalEvent),!n.isTouched)return void(n.startMoving&&n.isScrolling&&r.emit("touchMoveOpposite",d));const p=n.evCache.findIndex((e=>e.pointerId===d.pointerId));p>=0&&(n.evCache[p]=d);const A=n.evCache.length>1?n.evCache[0]:d,u=A.pageX,m=A.pageY;if(d.preventedByNestedSwiper)return s.startX=u,void(s.startY=m);if(!r.allowTouchMove)return d.target.matches(n.focusableElements)||(r.allowClick=!1),void(n.isTouched&&(Object.assign(s,{startX:u,startY:m,prevX:r.touches.currentX,prevY:r.touches.currentY,currentX:u,currentY:m}),n.touchStartTime=c()));if(i.touchReleaseOnEdges&&!i.loop)if(r.isVertical()){if(m<s.startY&&r.translate<=r.maxTranslate()||m>s.startY&&r.translate>=r.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(u<s.startX&&r.translate<=r.maxTranslate()||u>s.startX&&r.translate>=r.minTranslate())return;if(t.activeElement&&d.target===t.activeElement&&d.target.matches(n.focusableElements))return n.isMoved=!0,void(r.allowClick=!1);if(n.allowTouchCallbacks&&r.emit("touchMove",d),d.targetTouches&&d.targetTouches.length>1)return;s.currentX=u,s.currentY=m;const h=s.currentX-s.startX,f=s.currentY-s.startY;if(r.params.threshold&&Math.sqrt(h**2+f**2)<r.params.threshold)return;if(void 0===n.isScrolling){let e;r.isHorizontal()&&s.currentY===s.startY||r.isVertical()&&s.currentX===s.startX?n.isScrolling=!1:h*h+f*f>=25&&(e=180*Math.atan2(Math.abs(f),Math.abs(h))/Math.PI,n.isScrolling=r.isHorizontal()?e>i.touchAngle:90-e>i.touchAngle)}if(n.isScrolling&&r.emit("touchMoveOpposite",d),void 0===n.startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(n.startMoving=!0)),n.isScrolling||r.zoom&&r.params.zoom&&r.params.zoom.enabled&&n.evCache.length>1)return void(n.isTouched=!1);if(!n.startMoving)return;r.allowClick=!1,!i.cssMode&&d.cancelable&&d.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&d.stopPropagation();let g=r.isHorizontal()?h:f,C=r.isHorizontal()?s.currentX-s.previousX:s.currentY-s.previousY;i.oneWayMovement&&(g=Math.abs(g)*(o?1:-1),C=Math.abs(C)*(o?1:-1)),s.diff=g,g*=i.touchRatio,o&&(g=-g,C=-C);const v=r.touchesDirection;r.swipeDirection=g>0?"prev":"next",r.touchesDirection=C>0?"prev":"next";const w=r.params.loop&&!i.cssMode,x="next"===r.swipeDirection&&r.allowSlideNext||"prev"===r.swipeDirection&&r.allowSlidePrev;if(!n.isMoved){if(w&&x&&r.loopFix({direction:r.swipeDirection}),n.startTranslate=r.getTranslate(),r.setTransition(0),r.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});r.wrapperEl.dispatchEvent(e)}n.allowMomentumBounce=!1,!i.grabCursor||!0!==r.allowSlideNext&&!0!==r.allowSlidePrev||r.setGrabCursor(!0),r.emit("sliderFirstMove",d)}let b;n.isMoved&&v!==r.touchesDirection&&w&&x&&Math.abs(g)>=1&&(r.loopFix({direction:r.swipeDirection,setTranslate:!0}),b=!0),r.emit("sliderMove",d),n.isMoved=!0,n.currentTranslate=g+n.startTranslate;let y=!0,E=i.resistanceRatio;if(i.touchReleaseOnEdges&&(E=0),g>0?(w&&x&&!b&&n.currentTranslate>(i.centeredSlides?r.minTranslate()-r.size/2:r.minTranslate())&&r.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),n.currentTranslate>r.minTranslate()&&(y=!1,i.resistance&&(n.currentTranslate=r.minTranslate()-1+(-r.minTranslate()+n.startTranslate+g)**E))):g<0&&(w&&x&&!b&&n.currentTranslate<(i.centeredSlides?r.maxTranslate()+r.size/2:r.maxTranslate())&&r.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:r.slides.length-("auto"===i.slidesPerView?r.slidesPerViewDynamic():Math.ceil(parseFloat(i.slidesPerView,10)))}),n.currentTranslate<r.maxTranslate()&&(y=!1,i.resistance&&(n.currentTranslate=r.maxTranslate()+1-(r.maxTranslate()-n.startTranslate-g)**E))),y&&(d.preventedByNestedSwiper=!0),!r.allowSlideNext&&"next"===r.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!r.allowSlidePrev&&"prev"===r.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),r.allowSlidePrev||r.allowSlideNext||(n.currentTranslate=n.startTranslate),i.threshold>0){if(!(Math.abs(g)>i.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,n.currentTranslate=n.startTranslate,void(s.diff=r.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}i.followFinger&&!i.cssMode&&((i.freeMode&&i.freeMode.enabled&&r.freeMode||i.watchSlidesProgress)&&(r.updateActiveIndex(),r.updateSlidesClasses()),i.freeMode&&i.freeMode.enabled&&r.freeMode&&r.freeMode.onTouchMove(),r.updateProgress(n.currentTranslate),r.setTranslate(n.currentTranslate))}function z(e){const t=this,r=t.touchEventsData,n=r.evCache.findIndex((t=>t.pointerId===e.pointerId));if(n>=0&&r.evCache.splice(n,1),["pointercancel","pointerout","pointerleave","contextmenu"].includes(e.type)&&(!["pointercancel","contextmenu"].includes(e.type)||!t.browser.isSafari&&!t.browser.isWebView))return;const{params:i,touches:s,rtlTranslate:a,slidesGrid:o,enabled:l}=t;if(!l)return;if(!i.simulateTouch&&"mouse"===e.pointerType)return;let p=e;if(p.originalEvent&&(p=p.originalEvent),r.allowTouchCallbacks&&t.emit("touchEnd",p),r.allowTouchCallbacks=!1,!r.isTouched)return r.isMoved&&i.grabCursor&&t.setGrabCursor(!1),r.isMoved=!1,void(r.startMoving=!1);i.grabCursor&&r.isMoved&&r.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const A=c(),u=A-r.touchStartTime;if(t.allowClick){const e=p.path||p.composedPath&&p.composedPath();t.updateClickedSlide(e&&e[0]||p.target,e),t.emit("tap click",p),u<300&&A-r.lastClickTime<300&&t.emit("doubleTap doubleClick",p)}if(r.lastClickTime=c(),d((()=>{t.destroyed||(t.allowClick=!0)})),!r.isTouched||!r.isMoved||!t.swipeDirection||0===s.diff||r.currentTranslate===r.startTranslate)return r.isTouched=!1,r.isMoved=!1,void(r.startMoving=!1);let m;if(r.isTouched=!1,r.isMoved=!1,r.startMoving=!1,m=i.followFinger?a?t.translate:-t.translate:-r.currentTranslate,i.cssMode)return;if(i.freeMode&&i.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:m});let h=0,f=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<i.slidesPerGroupSkip?1:i.slidesPerGroup){const t=e<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;void 0!==o[e+t]?m>=o[e]&&m<o[e+t]&&(h=e,f=o[e+t]-o[e]):m>=o[e]&&(h=e,f=o[o.length-1]-o[o.length-2])}let g=null,C=null;i.rewind&&(t.isBeginning?C=i.virtual&&i.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(g=0));const v=(m-o[h])/f,w=h<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;if(u>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(v>=i.longSwipesRatio?t.slideTo(i.rewind&&t.isEnd?g:h+w):t.slideTo(h)),"prev"===t.swipeDirection&&(v>1-i.longSwipesRatio?t.slideTo(h+w):null!==C&&v<0&&Math.abs(v)>i.longSwipesRatio?t.slideTo(C):t.slideTo(h))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||p.target!==t.navigation.nextEl&&p.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==g?g:h+w),"prev"===t.swipeDirection&&t.slideTo(null!==C?C:h)):p.target===t.navigation.nextEl?t.slideTo(h+w):t.slideTo(h)}}function O(){const e=this,{params:t,el:r}=e;if(r&&0===r.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:n,allowSlidePrev:i,snapGrid:s}=e,a=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const o=a&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||o?e.params.loop&&!a?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=i,e.allowSlideNext=n,e.params.watchOverflow&&s!==e.snapGrid&&e.checkOverflow()}function G(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function I(){const e=this,{wrapperEl:t,rtlTranslate:r,enabled:n}=e;if(!n)return;let i;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const s=e.maxTranslate()-e.minTranslate();i=0===s?0:(e.translate-e.minTranslate())/s,i!==e.progress&&e.updateProgress(r?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function F(e){const t=this;E(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}let _=!1;function N(){}const j=(e,t)=>{const r=a(),{params:n,el:i,wrapperEl:s,device:o}=e,l=!!n.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;i[d]("pointerdown",e.onTouchStart,{passive:!1}),r[d]("pointermove",e.onTouchMove,{passive:!1,capture:l}),r[d]("pointerup",e.onTouchEnd,{passive:!0}),r[d]("pointercancel",e.onTouchEnd,{passive:!0}),r[d]("pointerout",e.onTouchEnd,{passive:!0}),r[d]("pointerleave",e.onTouchEnd,{passive:!0}),r[d]("contextmenu",e.onTouchEnd,{passive:!0}),(n.preventClicks||n.preventClicksPropagation)&&i[d]("click",e.onClick,!0),n.cssMode&&s[d]("scroll",e.onScroll),n.updateOnWindowResize?e[c](o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",O,!0):e[c]("observerUpdate",O,!0),i[d]("load",e.onLoad,{capture:!0})},D=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var $={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopedSlides:null,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function V(e,t){return function(r){void 0===r&&(r={});const n=Object.keys(r)[0],i=r[n];"object"==typeof i&&null!==i?(!0===e[n]&&(e[n]={enabled:!0}),"navigation"===n&&e[n]&&e[n].enabled&&!e[n].prevEl&&!e[n].nextEl&&(e[n].auto=!0),["pagination","scrollbar"].indexOf(n)>=0&&e[n]&&e[n].enabled&&!e[n].el&&(e[n].auto=!0),n in e&&"enabled"in i?("object"!=typeof e[n]||"enabled"in e[n]||(e[n].enabled=!0),e[n]||(e[n]={enabled:!1}),A(t,r)):A(t,r)):A(t,r)}}const W={eventsEmitter:y,update:P,translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:r,translate:n,wrapperEl:i}=this;if(t.virtualTranslate)return r?-n:n;if(t.cssMode)return n;let s=function(e,t){void 0===t&&(t="x");const r=l();let n,i,s;const a=function(e){const t=l();let r;return t.getComputedStyle&&(r=t.getComputedStyle(e,null)),!r&&e.currentStyle&&(r=e.currentStyle),r||(r=e.style),r}(e);return r.WebKitCSSMatrix?(i=a.transform||a.webkitTransform,i.split(",").length>6&&(i=i.split(", ").map((e=>e.replace(",","."))).join(", ")),s=new r.WebKitCSSMatrix("none"===i?"":i)):(s=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),n=s.toString().split(",")),"x"===t&&(i=r.WebKitCSSMatrix?s.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(i=r.WebKitCSSMatrix?s.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),i||0}(i,e);return s+=this.cssOverflowAdjustment(),r&&(s=-s),s||0},setTranslate:function(e,t){const r=this,{rtlTranslate:n,params:i,wrapperEl:s,progress:a}=r;let o,l=0,d=0;r.isHorizontal()?l=n?-e:e:d=e,i.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),r.previousTranslate=r.translate,r.translate=r.isHorizontal()?l:d,i.cssMode?s[r.isHorizontal()?"scrollLeft":"scrollTop"]=r.isHorizontal()?-l:-d:i.virtualTranslate||(r.isHorizontal()?l-=r.cssOverflowAdjustment():d-=r.cssOverflowAdjustment(),s.style.transform=`translate3d(${l}px, ${d}px, 0px)`);const c=r.maxTranslate()-r.minTranslate();o=0===c?0:(e-r.minTranslate())/c,o!==a&&r.updateProgress(e),r.emit("setTranslate",r.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,r,n,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===r&&(r=!0),void 0===n&&(n=!0);const s=this,{params:a,wrapperEl:o}=s;if(s.animating&&a.preventInteractionOnTransition)return!1;const l=s.minTranslate(),d=s.maxTranslate();let c;if(c=n&&e>l?l:n&&e<d?d:e,s.updateProgress(c),a.cssMode){const e=s.isHorizontal();if(0===t)o[e?"scrollLeft":"scrollTop"]=-c;else{if(!s.support.smoothScroll)return m({swiper:s,targetPosition:-c,side:e?"left":"top"}),!0;o.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(s.setTransition(0),s.setTranslate(c),r&&(s.emit("beforeTransitionStart",t,i),s.emit("transitionEnd"))):(s.setTransition(t),s.setTranslate(c),r&&(s.emit("beforeTransitionStart",t,i),s.emit("transitionStart")),s.animating||(s.animating=!0,s.onTranslateToWrapperTransitionEnd||(s.onTranslateToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.wrapperEl.removeEventListener("transitionend",s.onTranslateToWrapperTransitionEnd),s.onTranslateToWrapperTransitionEnd=null,delete s.onTranslateToWrapperTransitionEnd,r&&s.emit("transitionEnd"))}),s.wrapperEl.addEventListener("transitionend",s.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const r=this;r.params.cssMode||(r.wrapperEl.style.transitionDuration=`${e}ms`,r.wrapperEl.style.transitionDelay=0===e?"0ms":""),r.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const r=this,{params:n}=r;n.cssMode||(n.autoHeight&&r.updateAutoHeight(),M({swiper:r,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const r=this,{params:n}=r;r.animating=!1,n.cssMode||(r.setTransition(0),M({swiper:r,runCallbacks:e,direction:t,step:"End"}))}},slide:k,loop:{loopCreate:function(e){const t=this,{params:r,slidesEl:n}=t;!r.loop||t.virtual&&t.params.virtual.enabled||(h(n,`.${r.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)})),t.loopFix({slideRealIndex:e,direction:r.centeredSlides?void 0:"next"}))},loopFix:function(e){let{slideRealIndex:t,slideTo:r=!0,direction:n,setTranslate:i,activeSlideIndex:s,byController:a,byMousewheel:o}=void 0===e?{}:e;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:p,slidesEl:A,params:u}=l;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&u.virtual.enabled)return r&&(u.centeredSlides||0!==l.snapIndex?u.centeredSlides&&l.snapIndex<u.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=c,l.allowSlideNext=p,void l.emit("loopFix");const m="auto"===u.slidesPerView?l.slidesPerViewDynamic():Math.ceil(parseFloat(u.slidesPerView,10));let h=u.loopedSlides||m;h%u.slidesPerGroup!=0&&(h+=u.slidesPerGroup-h%u.slidesPerGroup),l.loopedSlides=h;const f=[],g=[];let C=l.activeIndex;void 0===s?s=l.getSlideIndex(l.slides.filter((e=>e.classList.contains(u.slideActiveClass)))[0]):C=s;const v="next"===n||!n,w="prev"===n||!n;let x=0,b=0;if(s<h){x=Math.max(h-s,u.slidesPerGroup);for(let e=0;e<h-s;e+=1){const t=e-Math.floor(e/d.length)*d.length;f.push(d.length-t-1)}}else if(s>l.slides.length-2*h){b=Math.max(s-(l.slides.length-2*h),u.slidesPerGroup);for(let e=0;e<b;e+=1){const t=e-Math.floor(e/d.length)*d.length;g.push(t)}}if(w&&f.forEach((e=>{l.slides[e].swiperLoopMoveDOM=!0,A.prepend(l.slides[e]),l.slides[e].swiperLoopMoveDOM=!1})),v&&g.forEach((e=>{l.slides[e].swiperLoopMoveDOM=!0,A.append(l.slides[e]),l.slides[e].swiperLoopMoveDOM=!1})),l.recalcSlides(),"auto"===u.slidesPerView&&l.updateSlides(),u.watchSlidesProgress&&l.updateSlidesOffset(),r)if(f.length>0&&w)if(void 0===t){const e=l.slidesGrid[C],t=l.slidesGrid[C+x]-e;o?l.setTranslate(l.translate-t):(l.slideTo(C+x,0,!1,!0),i&&(l.touches[l.isHorizontal()?"startX":"startY"]+=t,l.touchEventsData.currentTranslate=l.translate))}else i&&(l.slideToLoop(t,0,!1,!0),l.touchEventsData.currentTranslate=l.translate);else if(g.length>0&&v)if(void 0===t){const e=l.slidesGrid[C],t=l.slidesGrid[C-b]-e;o?l.setTranslate(l.translate-t):(l.slideTo(C-b,0,!1,!0),i&&(l.touches[l.isHorizontal()?"startX":"startY"]+=t,l.touchEventsData.currentTranslate=l.translate))}else l.slideToLoop(t,0,!1,!0);if(l.allowSlidePrev=c,l.allowSlideNext=p,l.controller&&l.controller.control&&!a){const e={slideRealIndex:t,direction:n,setTranslate:i,activeSlideIndex:s,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===u.slidesPerView&&r})})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...e,slideTo:l.controller.control.params.slidesPerView===u.slidesPerView&&r})}l.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:r}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const n=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;n[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),n.forEach((e=>{r.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}},grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const r="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),r.style.cursor="move",r.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,t=a(),{params:r}=e;e.onTouchStart=L.bind(e),e.onTouchMove=B.bind(e),e.onTouchEnd=z.bind(e),r.cssMode&&(e.onScroll=I.bind(e)),e.onClick=G.bind(e),e.onLoad=F.bind(e),_||(t.addEventListener("touchstart",N),_=!0),j(e,"on")},detachEvents:function(){j(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:r,params:n,el:i}=e,s=n.breakpoints;if(!s||s&&0===Object.keys(s).length)return;const a=e.getBreakpoint(s,e.params.breakpointsBase,e.el);if(!a||e.currentBreakpoint===a)return;const o=(a in s?s[a]:void 0)||e.originalParams,l=D(e,n),d=D(e,o),c=n.enabled;l&&!d?(i.classList.remove(`${n.containerModifierClass}grid`,`${n.containerModifierClass}grid-column`),e.emitContainerClasses()):!l&&d&&(i.classList.add(`${n.containerModifierClass}grid`),(o.grid.fill&&"column"===o.grid.fill||!o.grid.fill&&"column"===n.grid.fill)&&i.classList.add(`${n.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===o[t])return;const r=n[t]&&n[t].enabled,i=o[t]&&o[t].enabled;r&&!i&&e[t].disable(),!r&&i&&e[t].enable()}));const p=o.direction&&o.direction!==n.direction,u=n.loop&&(o.slidesPerView!==n.slidesPerView||p),m=n.loop;p&&r&&e.changeDirection(),A(e.params,o);const h=e.params.enabled,f=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),c&&!h?e.disable():!c&&h&&e.enable(),e.currentBreakpoint=a,e.emit("_beforeBreakpoint",o),r&&(u?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!m&&f?(e.loopCreate(t),e.updateSlides()):m&&!f&&e.loopDestroy()),e.emit("breakpoint",o)},getBreakpoint:function(e,t,r){if(void 0===t&&(t="window"),!e||"container"===t&&!r)return;let n=!1;const i=l(),s="window"===t?i.innerHeight:r.clientHeight,a=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:s*t,point:e}}return{value:e,point:e}}));a.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<a.length;e+=1){const{point:s,value:o}=a[e];"window"===t?i.matchMedia(`(min-width: ${o}px)`).matches&&(n=s):o<=r.clientWidth&&(n=s)}return n||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:r}=e,{slidesOffsetBefore:n}=r;if(n){const t=e.slides.length-1,r=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*n;e.isLocked=e.size>r}else e.isLocked=1===e.snapGrid.length;!0===r.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===r.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:r,rtl:n,el:i,device:s}=e,a=function(e,t){const r=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((n=>{e[n]&&r.push(t+n)})):"string"==typeof e&&r.push(t+e)})),r}(["initialized",r.direction,{"free-mode":e.params.freeMode&&r.freeMode.enabled},{autoheight:r.autoHeight},{rtl:n},{grid:r.grid&&r.grid.rows>1},{"grid-column":r.grid&&r.grid.rows>1&&"column"===r.grid.fill},{android:s.android},{ios:s.ios},{"css-mode":r.cssMode},{centered:r.cssMode&&r.centeredSlides},{"watch-progress":r.watchSlidesProgress}],r.containerModifierClass);t.push(...a),i.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e.classList.remove(...t),this.emitContainerClasses()}}},H={};class Y{constructor(){let e,t;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];1===n.length&&n[0].constructor&&"Object"===Object.prototype.toString.call(n[0]).slice(8,-1)?t=n[0]:[e,t]=n,t||(t={}),t=A({},t),e&&!t.el&&(t.el=e);const s=a();if(t.el&&"string"==typeof t.el&&s.querySelectorAll(t.el).length>1){const e=[];return s.querySelectorAll(t.el).forEach((r=>{const n=A({},t,{el:r});e.push(new Y(n))})),e}const o=this;var d;o.__swiper__=!0,o.support=b(),o.device=(void 0===(d={userAgent:t.userAgent})&&(d={}),w||(w=function(e){let{userAgent:t}=void 0===e?{}:e;const r=b(),n=l(),i=n.navigator.platform,s=t||n.navigator.userAgent,a={ios:!1,android:!1},o=n.screen.width,d=n.screen.height,c=s.match(/(Android);?[\s\/]+([\d.]+)?/);let p=s.match(/(iPad).*OS\s([\d_]+)/);const A=s.match(/(iPod)(.*OS\s([\d_]+))?/),u=!p&&s.match(/(iPhone\sOS|iOS)\s([\d_]+)/),m="Win32"===i;let h="MacIntel"===i;return!p&&h&&r.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${o}x${d}`)>=0&&(p=s.match(/(Version)\/([\d.]+)/),p||(p=[0,1,"13_0_0"]),h=!1),c&&!m&&(a.os="android",a.android=!0),(p||u||A)&&(a.os="ios",a.ios=!0),a}(d)),w),o.browser=(x||(x=function(){const e=l();let t=!1;function r(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(r()){const r=String(e.navigator.userAgent);if(r.includes("Version/")){const[e,n]=r.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));t=e<16||16===e&&n<2}}return{isSafari:t||r(),needPerspectiveFix:t,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}()),x),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],t.modules&&Array.isArray(t.modules)&&o.modules.push(...t.modules);const c={};o.modules.forEach((e=>{e({params:t,swiper:o,extendParams:V(t,c),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})}));const p=A({},$,c);return o.params=A({},p,H,t),o.originalParams=A({},o.params),o.passedParams=A({},t),o.params&&o.params.on&&Object.keys(o.params.on).forEach((e=>{o.on(e,o.params.on[e])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===o.params.direction,isVertical:()=>"vertical"===o.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,evCache:[]},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getSlideIndex(e){const{slidesEl:t,params:r}=this,n=g(h(t,`.${r.slideClass}, swiper-slide`)[0]);return g(e)-n}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=h(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const r=this;e=Math.min(Math.max(e,0),1);const n=r.minTranslate(),i=(r.maxTranslate()-n)*e+n;r.translateTo(i,void 0===t?0:t),r.updateActiveIndex(),r.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((r=>{const n=e.getSlideClasses(r);t.push({slideEl:r,classNames:n}),e.emit("_slideClass",r,n)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:r,slides:n,slidesGrid:i,slidesSizesGrid:s,size:a,activeIndex:o}=this;let l=1;if("number"==typeof r.slidesPerView)return r.slidesPerView;if(r.centeredSlides){let e,t=n[o]?n[o].swiperSlideSize:0;for(let r=o+1;r<n.length;r+=1)n[r]&&!e&&(t+=n[r].swiperSlideSize,l+=1,t>a&&(e=!0));for(let r=o-1;r>=0;r-=1)n[r]&&!e&&(t+=n[r].swiperSlideSize,l+=1,t>a&&(e=!0))}else if("current"===e)for(let e=o+1;e<n.length;e+=1)(t?i[e]+s[e]-i[o]<a:i[e]-i[o]<a)&&(l+=1);else for(let e=o-1;e>=0;e-=1)i[o]-i[e]<a&&(l+=1);return l}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:r}=e;function n(){const t=e.rtlTranslate?-1*e.translate:e.translate,r=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(r),e.updateActiveIndex(),e.updateSlidesClasses()}let i;if(r.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&E(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),r.freeMode&&r.freeMode.enabled&&!r.cssMode)n(),r.autoHeight&&e.updateAutoHeight();else{if(("auto"===r.slidesPerView||r.slidesPerView>1)&&e.isEnd&&!r.centeredSlides){const t=e.virtual&&r.virtual.enabled?e.virtual.slides:e.slides;i=e.slideTo(t.length-1,0,!1,!0)}else i=e.slideTo(e.activeIndex,0,!1,!0);i||n()}r.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const r=this,n=r.params.direction;return e||(e="horizontal"===n?"vertical":"horizontal"),e===n||"horizontal"!==e&&"vertical"!==e||(r.el.classList.remove(`${r.params.containerModifierClass}${n}`),r.el.classList.add(`${r.params.containerModifierClass}${e}`),r.emitContainerClasses(),r.params.direction=e,r.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),r.emit("changeDirection"),t&&r.update()),r}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let r=e||t.params.el;if("string"==typeof r&&(r=document.querySelector(r)),!r)return!1;r.swiper=t,r.parentNode&&r.parentNode.host&&"SWIPER-CONTAINER"===r.parentNode.host.nodeName&&(t.isElement=!0);const n=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let i=r&&r.shadowRoot&&r.shadowRoot.querySelector?r.shadowRoot.querySelector(n()):h(r,n())[0];return!i&&t.params.createElements&&(i=function(e,t){void 0===t&&(t=[]);const r=document.createElement("div");return r.classList.add(...Array.isArray(t)?t:[t]),r}(0,t.params.wrapperClass),r.append(i),h(r,`.${t.params.slideClass}`).forEach((e=>{i.append(e)}))),Object.assign(t,{el:r,wrapperEl:i,slidesEl:t.isElement&&!r.parentNode.host.slideSlots?r.parentNode.host:i,hostEl:t.isElement?r.parentNode.host:r,mounted:!0,rtl:"rtl"===r.dir.toLowerCase()||"rtl"===f(r,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===r.dir.toLowerCase()||"rtl"===f(r,"direction")),wrongRTL:"-webkit-box"===f(i,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const r=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&r.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),r.forEach((e=>{e.complete?E(t,e):e.addEventListener("load",(e=>{E(t,e.target)}))})),T(t),t.initialized=!0,T(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const r=this,{params:n,el:i,wrapperEl:s,slides:a}=r;return void 0===r.params||r.destroyed||(r.emit("beforeDestroy"),r.initialized=!1,r.detachEvents(),n.loop&&r.loopDestroy(),t&&(r.removeClasses(),i.removeAttribute("style"),s.removeAttribute("style"),a&&a.length&&a.forEach((e=>{e.classList.remove(n.slideVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),r.emit("destroy"),Object.keys(r.eventsListeners).forEach((e=>{r.off(e)})),!1!==e&&(r.el.swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(r)),r.destroyed=!0),null}static extendDefaults(e){A(H,e)}static get extendedDefaults(){return H}static get defaults(){return $}static installModule(e){Y.prototype.__modules__||(Y.prototype.__modules__=[]);const t=Y.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>Y.installModule(e))),Y):(Y.installModule(e),Y)}}Object.keys(W).forEach((e=>{Object.keys(W[e]).forEach((t=>{Y.prototype[t]=W[e][t]}))})),Y.use([function(e){let{swiper:t,on:r,emit:n}=e;const i=l();let s=null,a=null;const o=()=>{t&&!t.destroyed&&t.initialized&&(n("beforeResize"),n("resize"))},d=()=>{t&&!t.destroyed&&t.initialized&&n("orientationchange")};r("init",(()=>{t.params.resizeObserver&&void 0!==i.ResizeObserver?t&&!t.destroyed&&t.initialized&&(s=new ResizeObserver((e=>{a=i.requestAnimationFrame((()=>{const{width:r,height:n}=t;let i=r,s=n;e.forEach((e=>{let{contentBoxSize:r,contentRect:n,target:a}=e;a&&a!==t.el||(i=n?n.width:(r[0]||r).inlineSize,s=n?n.height:(r[0]||r).blockSize)})),i===r&&s===n||o()}))})),s.observe(t.el)):(i.addEventListener("resize",o),i.addEventListener("orientationchange",d))})),r("destroy",(()=>{a&&i.cancelAnimationFrame(a),s&&s.unobserve&&t.el&&(s.unobserve(t.el),s=null),i.removeEventListener("resize",o),i.removeEventListener("orientationchange",d)}))},function(e){let{swiper:t,extendParams:r,on:n,emit:i}=e;const s=[],a=l(),o=function(e,r){void 0===r&&(r={});const n=new(a.MutationObserver||a.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void i("observerUpdate",e[0]);const r=function(){i("observerUpdate",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(r):a.setTimeout(r,0)}));n.observe(e,{attributes:void 0===r.attributes||r.attributes,childList:void 0===r.childList||r.childList,characterData:void 0===r.characterData||r.characterData}),s.push(n)};r({observer:!1,observeParents:!1,observeSlideChildren:!1}),n("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=function(e,t){const r=[];let n=e.parentElement;for(;n;)r.push(n),n=n.parentElement;return r}(t.hostEl);for(let t=0;t<e.length;t+=1)o(e[t])}o(t.hostEl,{childList:t.params.observeSlideChildren}),o(t.wrapperEl,{attributes:!1})}})),n("destroy",(()=>{s.forEach((e=>{e.disconnect()})),s.splice(0,s.length)}))}])}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={id:n,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nc=void 0,(()=>{"use strict";const e=r(215);r(48),r(691),r(712),r(59),(0,e.rotateCircle)("240.120"),window.addEventListener("load",(()=>{document.body.classList.remove("preload")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,