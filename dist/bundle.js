(()=>{var e={460:(e,t,r)=>{"use strict";r.d(t,{Z:()=>o});var i=r(537),n=r.n(i),s=r(645),a=r.n(s)()(n());a.push([e.id,'.main{width:1438px;height:1078px;margin-left:320px;position:relative;border:1px rgba(66,86,122,.1) solid}.main::before,.main::after{content:"";position:absolute;background-color:rgba(66,86,122,.1)}.main::before{top:479px;left:0;width:100%;height:1px;transform:translateY(-50%)}.main::after{top:0;left:50%;width:1px;height:100%;transform:translateX(-50%)}.main .main-container-title-decoration{position:absolute;margin:10px 0 0 -1px;height:120px;width:5px;z-index:33;background:linear-gradient(rgb(56, 119, 238), rgb(239, 93, 168))}.main .main-container-title-head{margin:166px 0 0 79px;width:353px;height:134px;font-size:56px;line-height:67.2px}.main .main-container-title-head::before{left:11px;position:absolute;height:120px;width:5px;z-index:33;background:linear-gradient(rgb(56, 119, 238), rgb(239, 93, 168))}.main .main-container-sliderPanel{margin:393px 0 0 79px}.main .main-container-sliderPanel .main-container-sliderPanel-index{font-size:14px;font-weight:400}.main .main-container-sliderPanel .main-container-sliderPanel-arrows{margin-top:21px;display:flex;justify-content:space-between;width:120px}.main .main-container-sliderPanel .main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-left,.main .main-container-sliderPanel .main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-right{width:50px;height:50px;border:1px rgba(66,86,122,.5) solid;background:none;border-radius:50%;display:flex;justify-content:center;align-items:center;cursor:pointer;transition:.3s}.main .main-container-sliderPanel .main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-right img{transform:rotate(180deg)}.main .main-container-sliderPanel .main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-left:hover,.main .main-container-sliderPanel .main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-right:hover{background:#fff}.main .main-circle{position:absolute;border:1px rgba(66,86,122,.1) solid;border-radius:50%;width:528px;height:528px;top:479px;left:50%;transform:translate(-50%, -50%);z-index:5}.main .main-circle .main-circle-container{width:100%;height:100%;border-radius:50%;display:flex;align-items:center;justify-content:center;transition:.3s}.main .main-circle .main-circle-container .main-circle-point{display:flex;justify-content:center;align-items:center;width:54px;height:54px;border-radius:50%;position:absolute;transform-origin:center center;cursor:pointer}.main .main-circle .main-circle-container .main-circle-point:nth-child(1){transform:rotate(60deg) translate(265px) rotate(-60deg)}.main .main-circle .main-circle-container .main-circle-point:nth-child(2){transform:rotate(120deg) translate(265px) rotate(-120deg)}.main .main-circle .main-circle-container .main-circle-point:nth-child(3){transform:rotate(180deg) translate(265px) rotate(-180deg)}.main .main-circle .main-circle-container .main-circle-point:nth-child(4){transform:rotate(240deg) translate(265px) rotate(-240deg)}.main .main-circle .main-circle-container .main-circle-point:nth-child(5){transform:rotate(300deg) translate(265px) rotate(-300deg)}.main .main-circle .main-circle-container .main-circle-point:nth-child(6){transform:rotate(360deg) translate(265px) rotate(-360deg)}.main .main-circle .main-circle-container .main-circle-point:hover>.main-circle-point-index{width:54px;height:52px;border:1px rgba(48,62,88,.5) solid;color:#42567a;font-size:20px;font-weight:400}.main .main-circle .main-circle-container .main-circle-point .main-circle-point-index{display:flex;justify-content:center;align-items:center;border-radius:50%;width:0;height:0;background:#f4f5f9;border:3px #42567a solid;color:rgba(0,0,0,0);transition:.3s}.main .main-circle .main-circle-container .main-circle-point .main-circle-point-index.active{width:54px;height:52px;border:1px rgba(48,62,88,.5) solid;color:#42567a;font-size:20px;font-weight:400}.main .main-circle .main-circle-description{left:0;top:0;margin:20px 0 0 450px;position:absolute;color:#42567a;font-size:20px;font-weight:700;transition:.3s}.main .main-circle .main-circle-years{margin:-2px 0 0 2px;letter-spacing:-3px;left:-46%;top:33%;position:absolute;width:973px;font-size:200px;font-weight:700;line-height:160px;display:flex;justify-content:space-between;z-index:-1}.main .main-circle .main-circle-years .main-circle-years-first{color:#3877ee;transition:150ms}.main .main-circle .main-circle-years .main-circle-years-last{color:#ef5da8;transition:150ms}.main .main-slider{margin-top:57px;display:flex;justify-content:space-between}.main .main-slider .main-slider-wrapper{overflow:hidden;width:1280px;height:135px;cursor:pointer}.main .main-slider .main-slider-wrapper .main-slider-items{display:flex}.main .main-slider .main-slider-wrapper .main-slider-items .main-slider-items-item{margin-right:80px}.main .main-slider .main-slider-wrapper .main-slider-items .main-slider-items-item .main-slider-items-item-head{color:#3877ee;font-size:25px;font-family:Bebas Neue,serif;font-weight:400;text-transform:uppercase;line-height:30px;height:43px;transition:.3s}.main .main-slider .main-slider-wrapper .main-slider-items .main-slider-items-item .main-slider-items-item-description{font-size:20px;width:350px;display:inline-block;line-height:30px;transition:.3s}.main .main-slider .main-slider-wrapper .main-slider-items .main-slider-items-item:last-child{margin-right:0}.main .main-slider .main-slider-arrow-left,.main .main-slider .main-slider-arrow-right{width:40px;height:40px;background:none;border:none;box-shadow:0 0 15px rgba(56,119,238,.1);border-radius:9999px;z-index:3;cursor:pointer;transition:.3s}.main .main-slider .main-slider-arrow-left:hover,.main .main-slider .main-slider-arrow-right:hover{background:#fff}.main .main-slider .main-slider-arrow-left{margin:41px 0 0 38px}.main .main-slider .main-slider-arrow-right{margin:41px 38px 0 0}.main .main-slider .main-slider-arrow-left img{transform:rotate(180deg)}@media(max-width: 1919px){.main{bottom:0;width:320px;height:568px;margin:0 auto;border:none}.main:before{margin-left:20px;top:293px;height:2px;width:280px}.main:after{display:none}.main .main-container-title-decoration{display:none}.main .main-container-title-head{width:120px;height:40px;padding:58px 0 0 20px;margin:0;font-size:20px;line-height:1.2}.main .main-container-sliderPanel{position:absolute;bottom:0;height:66px;margin:0}.main .main-container-sliderPanel .main-container-sliderPanel-pagination{left:113px;top:28px;width:95px;height:6px;position:absolute;margin:0 auto;display:flex;justify-content:space-around}.main .main-container-sliderPanel .main-container-sliderPanel-pagination .main-container-sliderPanel-pagination-bullet{width:6px;height:6px;background:#42567a;border-radius:50%;opacity:.4;transition:.3s}.main .main-container-sliderPanel .main-container-sliderPanel-index{margin:0 0 0 20px}.main .main-container-sliderPanel .main-container-sliderPanel-arrows{margin:8px 0 0 20px;width:58px}.main .main-container-sliderPanel .main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-left,.main .main-container-sliderPanel .main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-right{width:25px;height:25px}.main .main-container-sliderPanel .main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-left img{transform:scale(0.5)}.main .main-container-sliderPanel .main-container-sliderPanel-arrows .main-container-sliderPanel-arrows-right img{transform:rotate(180deg) scale(0.5)}.main .main-circle{margin-top:93px;width:100%;height:150px;border:none;display:flex;top:initial}.main .main-circle .main-circle-container{width:100%;display:none;position:initial}.main .main-circle .main-circle-description{margin:140px 0 0 20px}.main .main-circle .main-circle-years{bottom:0;top:0;left:0;position:absolute;font-size:56px;width:100%;margin:auto;justify-content:space-evenly;letter-spacing:-1px}.main .main-slider{margin:210px 0 0 20px}.main .main-slider .main-slider-arrow-left,.main .main-slider .main-slider-arrow-right{display:none}.main .main-slider .main-slider-wrapper{width:100%}.main .main-slider .main-slider-wrapper .main-slider-items .main-slider-items-item{margin-right:25px}.main .main-slider .main-slider-wrapper .main-slider-items .main-slider-items-item .main-slider-items-item-head{font-size:16px;height:38px}.main .main-slider .main-slider-wrapper .main-slider-items .main-slider-items-item .main-slider-items-item-description{width:166px;height:80px;font-size:14px;line-height:20px}}*{color:#42567a;font-family:"PT Sans",sans-serif;margin:0}body{background:#f4f5f9}::-webkit-scrollbar{width:0}.hidden{visibility:hidden}.blocked{opacity:.5;cursor:default !important}.blocked:hover{background:none !important}.current{opacity:1 !important}.preload *{-webkit-transition:none !important;-moz-transition:none !important;-ms-transition:none !important;-o-transition:none !important}',"",{version:3,sources:["webpack://./src/style/main.scss","webpack://./styles.scss"],names:[],mappings:"AAEA,MACE,YAAA,CACA,aAAA,CACA,iBAAA,CACA,iBAAA,CAGA,mCAAA,CAGA,2BAEE,UAAA,CACA,iBAAA,CACA,mCAhBW,CAmBb,cACE,SAAA,CACA,MAAA,CACA,UAAA,CACA,UAAA,CACA,0BAAA,CAGF,aACE,KAAA,CACA,QAAA,CACA,SAAA,CACA,WAAA,CACA,0BAAA,CAGF,uCACE,iBAAA,CACA,oBAAA,CACA,YAAA,CACA,SAAA,CACA,UAAA,CACA,gEAAA,CAGF,iCACE,qBAAA,CACA,WAAA,CACA,YAAA,CACA,cAAA,CACA,kBAAA,CAEA,yCACE,SAAA,CACA,iBAAA,CACA,YAAA,CACA,SAAA,CACA,UAAA,CACA,gEAAA,CAIJ,kCACE,qBAAA,CAEA,oEACE,cAAA,CACA,eAAA,CAGF,qEACE,eAAA,CACA,YAAA,CACA,6BAAA,CACA,WAAA,CAEA,2NAEE,UAAA,CACA,WAAA,CACA,mCAAA,CACA,eAAA,CACA,iBAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,cAAA,CACA,cAAA,CAGF,kHACE,wBAAA,CAGF,uOAEE,eAAA,CAMN,mBACE,iBAAA,CACA,mCAAA,CACA,iBAAA,CACA,WAAA,CACA,YAAA,CACA,SAAA,CACA,QAAA,CACA,+BAAA,CACA,SAAA,CAEA,0CACE,UAAA,CACA,WAAA,CACA,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,cAAA,CAEA,6DACE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,iBAAA,CACA,8BAAA,CACA,cAAA,CAEA,0EACE,uDAAA,CAGF,0EACE,yDAAA,CAGF,0EACE,yDAAA,CAGF,0EACE,yDAAA,CAGF,0EACE,yDAAA,CAGF,0EACE,yDAAA,CAGF,4FACE,UAAA,CACA,WAAA,CACA,kCAAA,CACA,aAAA,CACA,cAAA,CACA,eAAA,CAGF,sFACE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,kBAAA,CACA,wBAAA,CACA,mBAAA,CACA,cAAA,CAEA,6FACE,UAAA,CACA,WAAA,CACA,kCAAA,CACA,aAAA,CACA,cAAA,CACA,eAAA,CAMR,4CACE,MAAA,CACA,KAAA,CACA,qBAAA,CACA,iBAAA,CACA,aAAA,CACA,cAAA,CACA,eAAA,CACA,cAAA,CAGF,sCACE,mBAAA,CACA,mBAAA,CACA,SAAA,CACA,OAAA,CACA,iBAAA,CACA,WAAA,CACA,eAAA,CACA,eAAA,CACA,iBAAA,CACA,YAAA,CACA,6BAAA,CACA,UAAA,CAEA,+DACE,aAAA,CACA,gBAAA,CAGF,8DACE,aAAA,CACA,gBAAA,CAKN,mBACE,eAAA,CACA,YAAA,CACA,6BAAA,CAEA,wCACE,eAAA,CACA,YAAA,CACA,YAAA,CACA,cAAA,CAEA,2DACE,YAAA,CAEA,mFACE,iBAAA,CAEA,gHACE,aAAA,CACA,cAAA,CACA,4BAAA,CACA,eAAA,CACA,wBAAA,CACA,gBAAA,CACA,WAAA,CACA,cAAA,CAGF,uHACE,cAAA,CACA,WAAA,CACA,oBAAA,CACA,gBAAA,CACA,cAAA,CAIJ,8FACE,cAAA,CAKN,uFAEE,UAAA,CACA,WAAA,CACA,eAAA,CACA,WAAA,CACA,uCAAA,CACA,oBAAA,CACA,SAAA,CACA,cAAA,CACA,cAAA,CAGF,mGAEE,eAAA,CAGF,2CACE,oBAAA,CAGF,4CACE,oBAAA,CAGF,+CACE,wBAAA,CAMN,0BAEE,MACE,QAAA,CACA,WAAA,CACA,YAAA,CACA,aAAA,CACA,WAAA,CAEA,aACE,gBAAA,CACA,SAAA,CACA,UAAA,CACA,WAAA,CAGF,YACE,YAAA,CAGF,uCACE,YAAA,CAGF,iCACE,WAAA,CACA,WAAA,CACA,qBAAA,CACA,QAAA,CACA,cAAA,CACA,eAAA,CAGF,kCACE,iBAAA,CACA,QAAA,CACA,WAAA,CACA,QAAA,CAEA,yEACE,UAAA,CACA,QAAA,CACA,UAAA,CACA,UAAA,CACA,iBAAA,CACA,aAAA,CACA,YAAA,CACA,4BAAA,CAEA,uHACE,SAAA,CACA,UAAA,CACA,kBAAA,CACA,iBAAA,CACA,UAAA,CACA,cAAA,CAIJ,oEACE,iBAAA,CAGF,qEACE,mBAAA,CACA,UAAA,CAEA,2NAEE,UAAA,CACA,WAAA,CAGF,iHACE,oBAAA,CAGF,kHACE,mCAAA,CAKN,mBACE,eAAA,CACA,UAAA,CACA,YAAA,CACA,WAAA,CACA,YAAA,CACA,WAAA,CAEA,0CACE,UAAA,CACA,YAAA,CACA,gBAAA,CAGF,4CACE,qBAAA,CAGF,sCACE,QAAA,CACA,KAAA,CACA,MAAA,CACA,iBAAA,CACA,cAAA,CACA,UAAA,CACA,WAAA,CACA,4BAAA,CACA,mBAAA,CAIJ,mBACE,qBAAA,CAEA,uFAEE,YAAA,CAGF,wCACE,UAAA,CAIE,mFACE,iBAAA,CAEA,gHACE,cAAA,CACA,WAAA,CAGF,uHACE,WAAA,CACA,WAAA,CACA,cAAA,CACA,gBAAA,CAAA,CCvbd,EACE,aAAA,CACA,gCAAA,CACA,QAAA,CAGF,KACE,kBAAA,CAGF,oBACE,OAAA,CAGF,QACE,iBAAA,CAGF,SACE,UAAA,CACA,yBAAA,CAGF,eACE,0BAAA,CAGF,SACE,oBAAA,CAGF,WACE,kCAAA,CACA,+BAAA,CACA,8BAAA,CACA,6BAAA",sourcesContent:["$border-color: rgba(66, 86, 122, 0.1);\r\n\r\n.main {\r\n  width: 1438px;\r\n  height: 1078px;\r\n  margin-left: 320px;\r\n  position: relative;\r\n\r\n  // Рисуем границы\r\n  border: 1px $border-color solid;\r\n\r\n  // Рисуем перекрестие\r\n  &::before,\r\n  &::after {\r\n    content: '';\r\n    position: absolute;\r\n    background-color: $border-color;\r\n  }\r\n\r\n  &::before {\r\n    top: 479px;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 1px;\r\n    transform: translateY(-50%);\r\n  }\r\n\r\n  &::after {\r\n    top: 0;\r\n    left: 50%;\r\n    width: 1px;\r\n    height: 100%;\r\n    transform: translateX(-50%);\r\n  }\r\n\r\n  .main-container-title-decoration {\r\n    position: absolute;\r\n    margin: 10px 0 0 -1px;\r\n    height: 120px;\r\n    width: 5px;\r\n    z-index: 33;\r\n    background: linear-gradient(rgba(56, 119, 238, 1), rgba(239, 93, 168, 1));\r\n  }\r\n\r\n  .main-container-title-head {\r\n    margin: 166px 0 0 79px;\r\n    width: 353px;\r\n    height: 134px;\r\n    font-size: 56px;\r\n    line-height: 67.20px;\r\n\r\n    &::before {\r\n      left: 11px;\r\n      position: absolute;\r\n      height: 120px;\r\n      width: 5px;\r\n      z-index: 33;\r\n      background: linear-gradient(rgba(56, 119, 238, 1), rgba(239, 93, 168, 1));\r\n    }\r\n  }\r\n\r\n  .main-container-sliderPanel {\r\n    margin: 393px 0 0 79px;\r\n\r\n    .main-container-sliderPanel-index {\r\n      font-size: 14px;\r\n      font-weight: 400;\r\n    }\r\n\r\n    .main-container-sliderPanel-arrows {\r\n      margin-top: 21px;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      width: 120px;\r\n\r\n      .main-container-sliderPanel-arrows-left,\r\n      .main-container-sliderPanel-arrows-right {\r\n        width: 50px;\r\n        height: 50px;\r\n        border: 1px rgba(66, 86, 122, 0.5) solid;\r\n        background: none;\r\n        border-radius: 50%;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        cursor: pointer;\r\n        transition: .3s;\r\n      }\r\n\r\n      .main-container-sliderPanel-arrows-right img {\r\n        transform: rotate(180deg);\r\n      }\r\n\r\n      .main-container-sliderPanel-arrows-left:hover,\r\n      .main-container-sliderPanel-arrows-right:hover {\r\n        background: #ffffff;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Рисуем круг\r\n  .main-circle {\r\n    position: absolute;\r\n    border: 1px $border-color solid;\r\n    border-radius: 50%;\r\n    width: 528px;\r\n    height: 528px;\r\n    top: 479px;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    z-index: 5;\r\n\r\n    .main-circle-container {\r\n      width: 100%;\r\n      height: 100%;\r\n      border-radius: 50%;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      transition: .3s;\r\n\r\n      .main-circle-point {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        width: 54px;\r\n        height: 54px;\r\n        border-radius: 50%;\r\n        position: absolute;\r\n        transform-origin: center center;\r\n        cursor: pointer;\r\n\r\n        &:nth-child(1) {\r\n          transform: rotate(60deg) translate(265px) rotate(-60deg);\r\n        }\r\n\r\n        &:nth-child(2) {\r\n          transform: rotate(120deg) translate(265px) rotate(-120deg);\r\n        }\r\n\r\n        &:nth-child(3) {\r\n          transform: rotate(180deg) translate(265px) rotate(-180deg);\r\n        }\r\n\r\n        &:nth-child(4) {\r\n          transform: rotate(240deg) translate(265px) rotate(-240deg);\r\n        }\r\n\r\n        &:nth-child(5) {\r\n          transform: rotate(300deg) translate(265px) rotate(-300deg);\r\n        }\r\n\r\n        &:nth-child(6) {\r\n          transform: rotate(360deg) translate(265px) rotate(-360deg);\r\n        }\r\n\r\n        &:hover > .main-circle-point-index {\r\n          width: 54px;\r\n          height: 52px;\r\n          border: 1px rgba(48, 62, 88, 0.50) solid;\r\n          color: #42567A;\r\n          font-size: 20px;\r\n          font-weight: 400;\r\n        }\r\n\r\n        .main-circle-point-index {\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          border-radius: 50%;\r\n          width: 0;\r\n          height: 0;\r\n          background: rgba(244, 245, 249, 1);\r\n          border: 3px #42567A solid;\r\n          color: transparent;\r\n          transition: .3s;\r\n\r\n          &.active {\r\n            width: 54px;\r\n            height: 52px;\r\n            border: 1px rgba(48, 62, 88, 0.50) solid;\r\n            color: #42567A;\r\n            font-size: 20px;\r\n            font-weight: 400;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .main-circle-description {\r\n      left: 0;\r\n      top: 0;\r\n      margin: 20px 0 0 450px;\r\n      position: absolute;\r\n      color: #42567A;\r\n      font-size: 20px;\r\n      font-weight: 700;\r\n      transition: .3s;\r\n    }\r\n\r\n    .main-circle-years {\r\n      margin: -2px 0 0 2px;\r\n      letter-spacing: -3px;\r\n      left: -46%;\r\n      top: 33%;\r\n      position: absolute;\r\n      width: 973px;\r\n      font-size: 200px;\r\n      font-weight: 700;\r\n      line-height: 160px;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      z-index: -1;\r\n\r\n      .main-circle-years-first {\r\n        color: #3877EE;\r\n        transition: 150ms;\r\n      }\r\n\r\n      .main-circle-years-last {\r\n        color: #EF5DA8;\r\n        transition: 150ms;\r\n      }\r\n    }\r\n  }\r\n\r\n  .main-slider {\r\n    margin-top: 57px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    .main-slider-wrapper {\r\n      overflow: hidden;\r\n      width: 1280px;\r\n      height: 135px;\r\n      cursor: pointer;\r\n\r\n      .main-slider-items {\r\n        display: flex;\r\n\r\n        .main-slider-items-item {\r\n          margin-right: 80px;\r\n\r\n          .main-slider-items-item-head {\r\n            color: #3877EE;\r\n            font-size: 25px;\r\n            font-family: Bebas Neue, serif;\r\n            font-weight: 400;\r\n            text-transform: uppercase;\r\n            line-height: 30px;\r\n            height: 43px;\r\n            transition: .3s;\r\n          }\r\n\r\n          .main-slider-items-item-description {\r\n            font-size: 20px;\r\n            width: 350px;\r\n            display: inline-block;\r\n            line-height: 30px;\r\n            transition: .3s;\r\n          }\r\n        }\r\n\r\n        .main-slider-items-item:last-child {\r\n          margin-right: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    .main-slider-arrow-left,\r\n    .main-slider-arrow-right {\r\n      width: 40px;\r\n      height: 40px;\r\n      background: none;\r\n      border: none;\r\n      box-shadow: 0 0 15px rgba(56, 119, 238, 0.10);\r\n      border-radius: 9999px;\r\n      z-index: 3;\r\n      cursor: pointer;\r\n      transition: .3s;\r\n    }\r\n\r\n    .main-slider-arrow-left:hover,\r\n    .main-slider-arrow-right:hover {\r\n      background: #ffffff;\r\n    }\r\n\r\n    .main-slider-arrow-left {\r\n      margin: 41px 0 0 38px;\r\n    }\r\n\r\n    .main-slider-arrow-right {\r\n      margin: 41px 38px 0 0;\r\n    }\r\n\r\n    .main-slider-arrow-left img {\r\n      transform: rotate(180deg);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@media (max-width: 1919px) {\r\n\r\n  .main {\r\n    bottom: 0;\r\n    width: 320px;\r\n    height: 568px;\r\n    margin: 0 auto;\r\n    border: none;\r\n\r\n    &:before {\r\n      margin-left: 20px;\r\n      top: 293px;\r\n      height: 2px;\r\n      width: 280px;\r\n    }\r\n\r\n    &:after {\r\n      display: none;\r\n    }\r\n\r\n    .main-container-title-decoration {\r\n      display: none;\r\n    }\r\n\r\n    .main-container-title-head {\r\n      width: 120px;\r\n      height: 40px;\r\n      padding: 58px 0 0 20px;\r\n      margin: 0;\r\n      font-size: 20px;\r\n      line-height: 1.2;\r\n    }\r\n\r\n    .main-container-sliderPanel {\r\n      position: absolute;\r\n      bottom: 0;\r\n      height: 66px;\r\n      margin: 0;\r\n\r\n      .main-container-sliderPanel-pagination {\r\n        left: 113px;\r\n        top: 28px;\r\n        width: 95px;\r\n        height: 6px;\r\n        position: absolute;\r\n        margin: 0 auto;\r\n        display: flex;\r\n        justify-content: space-around;\r\n\r\n        .main-container-sliderPanel-pagination-bullet {\r\n          width: 6px;\r\n          height: 6px;\r\n          background: rgba(66, 86, 122, 1);\r\n          border-radius: 50%;\r\n          opacity: 0.40;\r\n          transition: .3s;\r\n        }\r\n      }\r\n\r\n      .main-container-sliderPanel-index {\r\n        margin: 0 0 0 20px;\r\n      }\r\n\r\n      .main-container-sliderPanel-arrows {\r\n        margin: 8px 0 0 20px;\r\n        width: 58px;\r\n\r\n        .main-container-sliderPanel-arrows-left,\r\n        .main-container-sliderPanel-arrows-right {\r\n          width: 25px;\r\n          height: 25px;\r\n        }\r\n\r\n        .main-container-sliderPanel-arrows-left img {\r\n          transform: scale(0.5);\r\n        }\r\n\r\n        .main-container-sliderPanel-arrows-right img {\r\n          transform: rotate(180deg) scale(0.5);\r\n        }\r\n      }\r\n    }\r\n\r\n    .main-circle {\r\n      margin-top: 93px;\r\n      width: 100%;\r\n      height: 150px;\r\n      border: none;\r\n      display: flex;\r\n      top: initial;\r\n\r\n      .main-circle-container {\r\n        width: 100%;\r\n        display: none;\r\n        position: initial;\r\n      }\r\n\r\n      .main-circle-description {\r\n        margin: 140px 0 0 20px;\r\n      }\r\n\r\n      .main-circle-years {\r\n        bottom: 0;\r\n        top: 0;\r\n        left: 0;\r\n        position: absolute;\r\n        font-size: 56px;\r\n        width: 100%;\r\n        margin: auto;\r\n        justify-content: space-evenly;\r\n        letter-spacing: -1px;\r\n      }\r\n    }\r\n\r\n    .main-slider {\r\n      margin: 210px 0 0 20px;\r\n\r\n      .main-slider-arrow-left,\r\n      .main-slider-arrow-right {\r\n        display: none;\r\n      }\r\n\r\n      .main-slider-wrapper {\r\n        width: 100%;\r\n\r\n        .main-slider-items {\r\n\r\n          .main-slider-items-item {\r\n            margin-right: 25px;\r\n\r\n            .main-slider-items-item-head {\r\n              font-size: 16px;\r\n              height: 38px;\r\n            }\r\n\r\n            .main-slider-items-item-description {\r\n              width: 166px;\r\n              height: 80px;\r\n              font-size: 14px;\r\n              line-height: 20px;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","@import \"src/style/main.scss\";\r\n\r\n* {\r\n  color: #42567A;\r\n  font-family: 'PT Sans', sans-serif;\r\n  margin: 0;\r\n}\r\n\r\nbody {\r\n  background: #F4F5F9;\r\n}\r\n\r\n::-webkit-scrollbar {\r\n  width: 0;\r\n}\r\n\r\n.hidden {\r\n  visibility: hidden;\r\n}\r\n\r\n.blocked {\r\n  opacity: 0.5;\r\n  cursor: default !important;\r\n}\r\n\r\n.blocked:hover {\r\n  background: none !important;\r\n}\r\n\r\n.current {\r\n  opacity: 1 !important;\r\n}\r\n\r\n.preload * {\r\n  -webkit-transition: none !important;\r\n  -moz-transition: none !important;\r\n  -ms-transition: none !important;\r\n  -o-transition: none !important;\r\n}\r\n"],sourceRoot:""}]);const o=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",i=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),i&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),i&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,i,n,s){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(i)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(a[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);i&&a[c[0]]||(void 0!==s&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=s),r&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=r):c[2]=r),n&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=n):c[4]="".concat(n)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(n," */");return[t].concat([s]).join("\n")}return[t].join("\n")}},440:e=>{e.exports={Астрономия:{1961:"Ю. А. Гагарин совершил первый орбитальный полет и стал первым человеком в космосе.",1969:"Астронавты Армстронг, Олдрин и Коллинз совершили первую экспедицию на Луну на «Аполлон-11».",1990:"Запущен космический телескоп «Хаббл», названный в астрофизика и космолога честь Эдвина Хаббла.",2004:"Марсоход «Спирит» совершил мягкую посадку на Марс за три недели до марсохода «Оппортьюнити».",2013:"Многоразовая ракета-носитель «Фалкон 9» совершила пять успешных взлетов и посадок.",2022:"Зонд «Дарт» столкнулся с астероидом Диморфом, тестируя стратегию защиты Земли."},Биология:{1676:"Антони ван Левенгук микроскопировал каплю воды, обнаружив бактерии и впервые увидев микромир.",1895:"Вильгельмом Рентгеном сделан первый рентгеновский снимок, засняв кисть руки своей жены. ",1928:"Александр Флеминг создал первый антибиотик известный как «Пенициллин».",1967:"Кристиан Барнард произвел первую пересадку сердца от человека к человеку.",1996:"Родилась овца Долли, первое клонированное млекопитающее от одного родителя.",2022:"За 32 года работы биологи расшифровали 100% генома человека."},Математика:{1545:"Геронимо Кардано опубликовал 'Арс магни', включая методы решения кубических уравнений.",1643:"Рене Декарт ввел координатную систему, объединив математику и геометрию.",1900:"Давид Гильберт опубликовал список 23 нерешенных математических задач, известных как Гильбертовы проблемы.",1936:"Алан Тьюринг предложил модель универсальной машины, предшествующей компьютерам.",1994:"Эндрю Уайлс доказал последнюю теорему Ферма.",2013:"Михаэль Грюберман и Томас Халдейн разгадали гипотезу Шварца–Ципфа в теории чисел."},Интернет:{1969:"Создание «ARPANET», первой сети, ставшей основой для интернета.",1971:"Рэй Томлинсон разработал первую программу электронной почты.",1983:"Введена система доменных имен DNS, что упростило адресацию в сети.",1991:"Тим Бернерс-Ли представил World Wide Web, что стало основой современного интернета.",2004:"Марк Цукерберг запустил Facebook, став одной из крупнейших социальных сетей.",2021:"Биткоин достиг рекордной стоимости, подчеркивая рост интереса к криптовалютам."},Физика:{1687:"Исаак Ньютон опубликовал 'Математические начала натуральной философии', сформулировав законы движения и гравитации.",1905:"Альберт Эйнштейн представил теорию относительности, специальную и общую.",1927:"Вернер Хейзенберг сформулировал принцип неопределенности, основу квантовой механики.",1932:"Джеймс Чедвик обнаружил нейтрино, электронное нейтральное элементарное частицу.",1965:"Арно Пензиас и Роберт Уилсон обнаружили космическое микроволновое излучение, подтверждая теорию большого взрыва.",2012:"Обнаружение бозона Хиггса в ЦЕРНе подтвердило существование элементарных частиц."},Химия:{1774:"Джозеф Простер создал флогистоновую теорию, одну из первых теорий о химических реакциях.",1869:"Дмитрий Менделеев представил таблицу химических элементов, предшествующую периодической таблице.",1907:"Химики Георгий Урбайн и Чарльз Видерс создали ниобий и тантал, обнаружив их одновременно и независимо друг от друга.",1953:"Джеймс Уотсон и Фрэнсис Крик описали структуру ДНК, открывая секреты нашего генетического кода.",2016:"Исследователи создали периодическую систему элементов, включающую 118 элементов.",2020:"Химики синтезировали элемент 118 в ядерной реакции, подтвердив его существование в периодической системе."}}},59:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>g});var i=r(379),n=r.n(i),s=r(795),a=r.n(s),o=r(569),l=r.n(o),d=r(565),c=r.n(d),p=r(216),A=r.n(p),m=r(589),u=r.n(m),h=r(460),f={};f.styleTagTransform=u(),f.setAttributes=c(),f.insert=l().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=A(),n()(h.Z,f);const g=h.Z&&h.Z.locals?h.Z.locals:void 0},379:e=>{"use strict";var t=[];function r(e){for(var r=-1,i=0;i<t.length;i++)if(t[i].identifier===e){r=i;break}return r}function i(e,i){for(var s={},a=[],o=0;o<e.length;o++){var l=e[o],d=i.base?l[0]+i.base:l[0],c=s[d]||0,p="".concat(d," ").concat(c);s[d]=c+1;var A=r(p),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(m);else{var u=n(m,i);i.byIndex=o,t.splice(o,0,{identifier:p,updater:u,references:1})}a.push(p)}return a}function n(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,n){var s=i(e=e||[],n=n||{});return function(e){e=e||[];for(var a=0;a<s.length;a++){var o=r(s[a]);t[o].references--}for(var l=i(e,n),d=0;d<s.length;d++){var c=r(s[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}s=l}}},569:e=>{"use strict";var t={};e.exports=function(e,r){var i=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(r)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{"use strict";e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var i="";r.supports&&(i+="@supports (".concat(r.supports,") {")),r.media&&(i+="@media ".concat(r.media," {"));var n=void 0!==r.layer;n&&(i+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),i+=r.css,n&&(i+="}"),r.media&&(i+="}"),r.supports&&(i+="}");var s=r.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},215:function(e,t,r){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r);var n=Object.getOwnPropertyDescriptor(t,r);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,i,n)}:function(e,t,r,i){void 0===i&&(i=r),e[i]=t[r]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&i(t,e,r);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.rotateCircle=t.updateContent=void 0;const a=s(r(440)),o=r(712),l=r(48),d=a,c=document.getElementsByClassName("main-circle-point-index"),p=document.getElementsByClassName("main-slider-items-item");function A(e){let t=0;const r=document.getElementsByClassName(e)[0].innerHTML,i=Object.keys(d)[+r-1],n=document.getElementsByClassName("main-circle-description")[0],s=document.getElementsByClassName("main-circle-years-first")[0],a=document.getElementsByClassName("main-circle-years-last")[0];for(const e of p){const r=e.children[0],n=e.children[1];r.style.opacity="0",n.style.opacity="0",setTimeout((()=>{l.swiper.slideTo(0,0),r.innerHTML=Object.keys(d[i])[t],n.innerHTML=d[i][Object.keys(d[i])[t]],r.style.opacity="1",n.style.opacity="1",t+=1}),300)}n.style.opacity="0",s.style.opacity="0",a.style.opacity="0",setTimeout((()=>{n.innerHTML=Object.keys(d)[+r-1],s.innerHTML=Object.keys(d[i])[0],a.innerHTML=Object.keys(d[i])[5],n.style.opacity="1",s.style.opacity="1",a.style.opacity="1"}),150)}function m(e){const t=document.getElementsByClassName("main-circle-container")[0],r=document.getElementsByClassName(e)[0];t.style.transform=`rotate(${e.split(".")[0]}deg)`;for(const t of c)t.classList.remove("active"),t.style.transform=`rotate(${e.split(".")[1]}deg)`;r.classList.add("active"),document.getElementsByClassName("main-container-sliderPanel-index")[0].innerHTML=`0${r.innerHTML}/06`;const i=document.getElementsByClassName("main-container-sliderPanel-arrows-left")[0],n=document.getElementsByClassName("main-container-sliderPanel-arrows-right")[0];"1"===r.classList[2]?(i.classList.add("blocked"),n.classList.remove("blocked")):"6"===r.classList[2]?(i.classList.remove("blocked"),n.classList.add("blocked")):(n.classList.remove("blocked"),i.classList.remove("blocked")),(0,o.handleClick)(+document.getElementsByClassName(e)[0].classList[2]-1),A(e)}t.updateContent=A,t.rotateCircle=m;for(const e of c)e.addEventListener("click",(()=>{m(e.classList[1])}))},712:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.handleClick=void 0;const i=r(215),n=document.querySelectorAll(".main-container-sliderPanel-pagination-bullet");function s(e){const t=document.getElementsByClassName("main-container-sliderPanel-arrows-left")[0],r=document.getElementsByClassName("main-container-sliderPanel-arrows-right")[0];0===e?(t.classList.add("blocked"),r.classList.remove("blocked")):5===e?(t.classList.remove("blocked"),r.classList.add("blocked")):(r.classList.remove("blocked"),t.classList.remove("blocked")),n.forEach((e=>{e.classList.remove("current")})),n[e].classList.add("current"),document.getElementsByClassName("main-container-sliderPanel-index")[0].innerHTML=`0${e+1}/06`}t.handleClick=s,n.forEach(((e,t)=>{e.addEventListener("click",(()=>{s(t),(0,i.updateContent)(`${t+1}`)}))}))},48:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.swiper=void 0;const i=r(228),n=document.querySelector(".main-slider-wrapper");t.swiper=new i.Swiper(n,{breakpoints:{1919:{slidesPerView:3},320:{slidesPerView:1.6}}});const s=document.getElementsByClassName("main-slider-arrow-left")[0],a=document.getElementsByClassName("main-slider-arrow-right")[0];function o(e){"main-slider-arrow-right"===e.currentTarget.classList[0]?t.swiper.slideNext(500):t.swiper.slidePrev(500)}t.swiper.on("slideChangeTransitionEnd",(()=>{t.swiper.isBeginning?s.classList.add("hidden"):s.classList.remove("hidden"),t.swiper.isEnd?a.classList.add("hidden"):a.classList.remove("hidden")})),s.addEventListener("click",(e=>o(e))),a.addEventListener("click",(e=>o(e)))},691:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(215);function n(e){const t=document.getElementsByClassName("main-container-sliderPanel-index")[0].innerHTML,r=document.getElementsByClassName("main-container-sliderPanel-arrows-left")[0],n=document.getElementsByClassName("main-container-sliderPanel-arrows-right")[0];if(e.target instanceof HTMLElement){if(e.target.classList.contains("blocked")||e.target.parentElement.classList.contains("blocked"))return;e.target.classList.contains("main-container-sliderPanel-arrows-right")||e.target.parentElement.classList.contains("main-container-sliderPanel-arrows-right")?(0,i.rotateCircle)(document.getElementsByClassName(""+(+t[1]+1))[0].classList[1]):(0,i.rotateCircle)(document.getElementsByClassName(""+(+t[1]-1))[0].classList[1]),"02/06"===t&&e.target===r||"02/06"===t&&e.target.parentElement!==r?r.classList.add("blocked"):"05/06"===t&&e.target===n||"05/06"===t&&e.target.parentElement===n?n.classList.add("blocked"):(r.classList.remove("blocked"),n.classList.remove("blocked"))}}document.getElementsByClassName("main-container-sliderPanel-arrows-left")[0].addEventListener("click",(e=>{n(e)})),document.getElementsByClassName("main-container-sliderPanel-arrows-right")[0].addEventListener("click",(e=>{n(e)}))},228:(e,t,r)=>{"use strict";function i(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function n(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((r=>{void 0===e[r]?e[r]=t[r]:i(t[r])&&i(e[r])&&Object.keys(t[r]).length>0&&n(e[r],t[r])}))}r.r(t),r.d(t,{Swiper:()=>Y,default:()=>Y});const s={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function a(){const e="undefined"!=typeof document?document:{};return n(e,s),e}const o={document:s,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function l(){const e="undefined"!=typeof window?window:{};return n(e,o),e}function d(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function c(){return Date.now()}function p(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function A(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const n=i<0||arguments.length<=i?void 0:arguments[i];if(null!=n&&(r=n,!("undefined"!=typeof window&&void 0!==window.HTMLElement?r instanceof HTMLElement:r&&(1===r.nodeType||11===r.nodeType)))){const r=Object.keys(Object(n)).filter((e=>t.indexOf(e)<0));for(let t=0,i=r.length;t<i;t+=1){const i=r[t],s=Object.getOwnPropertyDescriptor(n,i);void 0!==s&&s.enumerable&&(p(e[i])&&p(n[i])?n[i].__swiper__?e[i]=n[i]:A(e[i],n[i]):!p(e[i])&&p(n[i])?(e[i]={},n[i].__swiper__?e[i]=n[i]:A(e[i],n[i])):e[i]=n[i])}}}var r;return e}function m(e,t,r){e.style.setProperty(t,r)}function u(e){let{swiper:t,targetPosition:r,side:i}=e;const n=l(),s=-t.translate;let a,o=null;const d=t.params.speed;t.wrapperEl.style.scrollSnapType="none",n.cancelAnimationFrame(t.cssModeFrameID);const c=r>s?"next":"prev",p=(e,t)=>"next"===c&&e>=t||"prev"===c&&e<=t,A=()=>{a=(new Date).getTime(),null===o&&(o=a);const e=Math.max(Math.min((a-o)/d,1),0),l=.5-Math.cos(e*Math.PI)/2;let c=s+l*(r-s);if(p(c,r)&&(c=r),t.wrapperEl.scrollTo({[i]:c}),p(c,r))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[i]:c})})),void n.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=n.requestAnimationFrame(A)};A()}function h(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function f(e,t){return l().getComputedStyle(e,null).getPropertyValue(t)}function g(e){let t,r=e;if(r){for(t=0;null!==(r=r.previousSibling);)1===r.nodeType&&(t+=1);return t}}function C(e,t,r){const i=l();return r?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}let v,w,x;function b(){return v||(v=function(){const e=l(),t=a();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),v}var y={on(e,t,r){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const n=r?"unshift":"push";return e.split(" ").forEach((e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][n](t)})),i},once(e,t,r){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;function n(){i.off(e,n),n.__emitterProxy&&delete n.__emitterProxy;for(var r=arguments.length,s=new Array(r),a=0;a<r;a++)s[a]=arguments[a];t.apply(i,s)}return n.__emitterProxy=t,i.on(e,n,r)},onAny(e,t){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof e)return r;const i=t?"unshift":"push";return r.eventsAnyListeners.indexOf(e)<0&&r.eventsAnyListeners[i](e),r},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const r=t.eventsAnyListeners.indexOf(e);return r>=0&&t.eventsAnyListeners.splice(r,1),t},off(e,t){const r=this;return!r.eventsListeners||r.destroyed?r:r.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?r.eventsListeners[e]=[]:r.eventsListeners[e]&&r.eventsListeners[e].forEach(((i,n)=>{(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&r.eventsListeners[e].splice(n,1)}))})),r):r},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,r,i;for(var n=arguments.length,s=new Array(n),a=0;a<n;a++)s[a]=arguments[a];return"string"==typeof s[0]||Array.isArray(s[0])?(t=s[0],r=s.slice(1,s.length),i=e):(t=s[0].events,r=s[0].data,i=s[0].context||e),r.unshift(i),(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(i,[t,...r])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(i,r)}))})),e}};const E=(e,t)=>{if(!e||e.destroyed||!e.params)return;const r=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(r){let t=r.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(r.shadowRoot?t=r.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{r.shadowRoot&&(t=r.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},S=(e,t)=>{if(!e.slides[t])return;const r=e.slides[t].querySelector('[loading="lazy"]');r&&r.removeAttribute("loading")},T=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const r=e.slides.length;if(!r||!t||t<0)return;t=Math.min(t,r);const i="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),n=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const r=n,s=[r-t];return s.push(...Array.from({length:t}).map(((e,t)=>r+i+t))),void e.slides.forEach(((t,r)=>{s.includes(t.column)&&S(e,r)}))}const s=n+i-1;if(e.params.rewind||e.params.loop)for(let i=n-t;i<=s+t;i+=1){const t=(i%r+r)%r;(t<n||t>s)&&S(e,t)}else for(let i=Math.max(n-t,0);i<=Math.min(s+t,r-1);i+=1)i!==n&&(i>s||i<n)&&S(e,i)};var P={updateSize:function(){const e=this;let t,r;const i=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:i.clientWidth,r=void 0!==e.params.height&&null!==e.params.height?e.params.height:i.clientHeight,0===t&&e.isHorizontal()||0===r&&e.isVertical()||(t=t-parseInt(f(i,"padding-left")||0,10)-parseInt(f(i,"padding-right")||0,10),r=r-parseInt(f(i,"padding-top")||0,10)-parseInt(f(i,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(r)&&(r=0),Object.assign(e,{width:t,height:r,size:e.isHorizontal()?t:r}))},updateSlides:function(){const e=this;function t(t){return e.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}function r(e,r){return parseFloat(e.getPropertyValue(t(r))||0)}const i=e.params,{wrapperEl:n,slidesEl:s,size:a,rtlTranslate:o,wrongRTL:l}=e,d=e.virtual&&i.virtual.enabled,c=d?e.virtual.slides.length:e.slides.length,p=h(s,`.${e.params.slideClass}, swiper-slide`),A=d?e.virtual.slides.length:p.length;let u=[];const g=[],v=[];let w=i.slidesOffsetBefore;"function"==typeof w&&(w=i.slidesOffsetBefore.call(e));let x=i.slidesOffsetAfter;"function"==typeof x&&(x=i.slidesOffsetAfter.call(e));const b=e.snapGrid.length,y=e.slidesGrid.length;let E=i.spaceBetween,S=-w,T=0,P=0;if(void 0===a)return;"string"==typeof E&&E.indexOf("%")>=0?E=parseFloat(E.replace("%",""))/100*a:"string"==typeof E&&(E=parseFloat(E)),e.virtualSize=-E,p.forEach((e=>{o?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),i.centeredSlides&&i.cssMode&&(m(n,"--swiper-centered-offset-before",""),m(n,"--swiper-centered-offset-after",""));const M=i.grid&&i.grid.rows>1&&e.grid;let k;M&&e.grid.initSlides(A);const L="auto"===i.slidesPerView&&i.breakpoints&&Object.keys(i.breakpoints).filter((e=>void 0!==i.breakpoints[e].slidesPerView)).length>0;for(let n=0;n<A;n+=1){let s;if(k=0,p[n]&&(s=p[n]),M&&e.grid.updateSlide(n,s,A,t),!p[n]||"none"!==f(s,"display")){if("auto"===i.slidesPerView){L&&(p[n].style[t("width")]="");const a=getComputedStyle(s),o=s.style.transform,l=s.style.webkitTransform;if(o&&(s.style.transform="none"),l&&(s.style.webkitTransform="none"),i.roundLengths)k=e.isHorizontal()?C(s,"width",!0):C(s,"height",!0);else{const e=r(a,"width"),t=r(a,"padding-left"),i=r(a,"padding-right"),n=r(a,"margin-left"),o=r(a,"margin-right"),l=a.getPropertyValue("box-sizing");if(l&&"border-box"===l)k=e+n+o;else{const{clientWidth:r,offsetWidth:a}=s;k=e+t+i+n+o+(a-r)}}o&&(s.style.transform=o),l&&(s.style.webkitTransform=l),i.roundLengths&&(k=Math.floor(k))}else k=(a-(i.slidesPerView-1)*E)/i.slidesPerView,i.roundLengths&&(k=Math.floor(k)),p[n]&&(p[n].style[t("width")]=`${k}px`);p[n]&&(p[n].swiperSlideSize=k),v.push(k),i.centeredSlides?(S=S+k/2+T/2+E,0===T&&0!==n&&(S=S-a/2-E),0===n&&(S=S-a/2-E),Math.abs(S)<.001&&(S=0),i.roundLengths&&(S=Math.floor(S)),P%i.slidesPerGroup==0&&u.push(S),g.push(S)):(i.roundLengths&&(S=Math.floor(S)),(P-Math.min(e.params.slidesPerGroupSkip,P))%e.params.slidesPerGroup==0&&u.push(S),g.push(S),S=S+k+E),e.virtualSize+=k+E,T=k,P+=1}}if(e.virtualSize=Math.max(e.virtualSize,a)+x,o&&l&&("slide"===i.effect||"coverflow"===i.effect)&&(n.style.width=`${e.virtualSize+E}px`),i.setWrapperSize&&(n.style[t("width")]=`${e.virtualSize+E}px`),M&&e.grid.updateWrapperSize(k,u,t),!i.centeredSlides){const t=[];for(let r=0;r<u.length;r+=1){let n=u[r];i.roundLengths&&(n=Math.floor(n)),u[r]<=e.virtualSize-a&&t.push(n)}u=t,Math.floor(e.virtualSize-a)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-a)}if(d&&i.loop){const t=v[0]+E;if(i.slidesPerGroup>1){const r=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/i.slidesPerGroup),n=t*i.slidesPerGroup;for(let e=0;e<r;e+=1)u.push(u[u.length-1]+n)}for(let r=0;r<e.virtual.slidesBefore+e.virtual.slidesAfter;r+=1)1===i.slidesPerGroup&&u.push(u[u.length-1]+t),g.push(g[g.length-1]+t),e.virtualSize+=t}if(0===u.length&&(u=[0]),0!==E){const r=e.isHorizontal()&&o?"marginLeft":t("marginRight");p.filter(((e,t)=>!(i.cssMode&&!i.loop)||t!==p.length-1)).forEach((e=>{e.style[r]=`${E}px`}))}if(i.centeredSlides&&i.centeredSlidesBounds){let e=0;v.forEach((t=>{e+=t+(E||0)})),e-=E;const t=e-a;u=u.map((e=>e<=0?-w:e>t?t+x:e))}if(i.centerInsufficientSlides){let e=0;if(v.forEach((t=>{e+=t+(E||0)})),e-=E,e<a){const t=(a-e)/2;u.forEach(((e,r)=>{u[r]=e-t})),g.forEach(((e,r)=>{g[r]=e+t}))}}if(Object.assign(e,{slides:p,snapGrid:u,slidesGrid:g,slidesSizesGrid:v}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){m(n,"--swiper-centered-offset-before",-u[0]+"px"),m(n,"--swiper-centered-offset-after",e.size/2-v[v.length-1]/2+"px");const t=-e.snapGrid[0],r=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+r))}if(A!==c&&e.emit("slidesLengthChange"),u.length!==b&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),g.length!==y&&e.emit("slidesGridLengthChange"),i.watchSlidesProgress&&e.updateSlidesOffset(),!(d||i.cssMode||"slide"!==i.effect&&"fade"!==i.effect)){const t=`${i.containerModifierClass}backface-hidden`,r=e.el.classList.contains(t);A<=i.maxBackfaceHiddenSlides?r||e.el.classList.add(t):r&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,r=[],i=t.virtual&&t.params.virtual.enabled;let n,s=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const a=e=>i?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{r.push(e)}));else for(n=0;n<Math.ceil(t.params.slidesPerView);n+=1){const e=t.activeIndex+n;if(e>t.slides.length&&!i)break;r.push(a(e))}else r.push(a(t.activeIndex));for(n=0;n<r.length;n+=1)if(void 0!==r[n]){const e=r[n].offsetHeight;s=e>s?e:s}(s||0===s)&&(t.wrapperEl.style.height=`${s}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,r=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=(e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop)-r-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,r=t.params,{slides:i,rtlTranslate:n,snapGrid:s}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let a=-e;n&&(a=e),i.forEach((e=>{e.classList.remove(r.slideVisibleClass)})),t.visibleSlidesIndexes=[],t.visibleSlides=[];let o=r.spaceBetween;"string"==typeof o&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*t.size:"string"==typeof o&&(o=parseFloat(o));for(let e=0;e<i.length;e+=1){const l=i[e];let d=l.swiperSlideOffset;r.cssMode&&r.centeredSlides&&(d-=i[0].swiperSlideOffset);const c=(a+(r.centeredSlides?t.minTranslate():0)-d)/(l.swiperSlideSize+o),p=(a-s[0]+(r.centeredSlides?t.minTranslate():0)-d)/(l.swiperSlideSize+o),A=-(a-d),m=A+t.slidesSizesGrid[e];(A>=0&&A<t.size-1||m>1&&m<=t.size||A<=0&&m>=t.size)&&(t.visibleSlides.push(l),t.visibleSlidesIndexes.push(e),i[e].classList.add(r.slideVisibleClass)),l.progress=n?-c:c,l.originalProgress=n?-p:p}},updateProgress:function(e){const t=this;if(void 0===e){const r=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*r||0}const r=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:n,isBeginning:s,isEnd:a,progressLoop:o}=t;const l=s,d=a;if(0===i)n=0,s=!0,a=!0;else{n=(e-t.minTranslate())/i;const r=Math.abs(e-t.minTranslate())<1,o=Math.abs(e-t.maxTranslate())<1;s=r||n<=0,a=o||n>=1,r&&(n=0),o&&(n=1)}if(r.loop){const r=t.getSlideIndexByData(0),i=t.getSlideIndexByData(t.slides.length-1),n=t.slidesGrid[r],s=t.slidesGrid[i],a=t.slidesGrid[t.slidesGrid.length-1],l=Math.abs(e);o=l>=n?(l-n)/a:(l+a-s)/a,o>1&&(o-=1)}Object.assign(t,{progress:n,progressLoop:o,isBeginning:s,isEnd:a}),(r.watchSlidesProgress||r.centeredSlides&&r.autoHeight)&&t.updateSlidesProgress(e),s&&!l&&t.emit("reachBeginning toEdge"),a&&!d&&t.emit("reachEnd toEdge"),(l&&!s||d&&!a)&&t.emit("fromEdge"),t.emit("progress",n)},updateSlidesClasses:function(){const e=this,{slides:t,params:r,slidesEl:i,activeIndex:n}=e,s=e.virtual&&r.virtual.enabled,a=e=>h(i,`.${r.slideClass}${e}, swiper-slide${e}`)[0];let o;if(t.forEach((e=>{e.classList.remove(r.slideActiveClass,r.slideNextClass,r.slidePrevClass)})),s)if(r.loop){let t=n-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),o=a(`[data-swiper-slide-index="${t}"]`)}else o=a(`[data-swiper-slide-index="${n}"]`);else o=t[n];if(o){o.classList.add(r.slideActiveClass);let e=function(e,t){const r=[];for(;e.nextElementSibling;){const i=e.nextElementSibling;t?i.matches(t)&&r.push(i):r.push(i),e=i}return r}(o,`.${r.slideClass}, swiper-slide`)[0];r.loop&&!e&&(e=t[0]),e&&e.classList.add(r.slideNextClass);let i=function(e,t){const r=[];for(;e.previousElementSibling;){const i=e.previousElementSibling;t?i.matches(t)&&r.push(i):r.push(i),e=i}return r}(o,`.${r.slideClass}, swiper-slide`)[0];r.loop&&0===!i&&(i=t[t.length-1]),i&&i.classList.add(r.slidePrevClass)}e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,r=t.rtlTranslate?t.translate:-t.translate,{snapGrid:i,params:n,activeIndex:s,realIndex:a,snapIndex:o}=t;let l,d=e;const c=e=>{let r=e-t.virtual.slidesBefore;return r<0&&(r=t.virtual.slides.length+r),r>=t.virtual.slides.length&&(r-=t.virtual.slides.length),r};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:r}=e,i=e.rtlTranslate?e.translate:-e.translate;let n;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?i>=t[e]&&i<t[e+1]-(t[e+1]-t[e])/2?n=e:i>=t[e]&&i<t[e+1]&&(n=e+1):i>=t[e]&&(n=e);return r.normalizeSlideIndex&&(n<0||void 0===n)&&(n=0),n}(t)),i.indexOf(r)>=0)l=i.indexOf(r);else{const e=Math.min(n.slidesPerGroupSkip,d);l=e+Math.floor((d-e)/n.slidesPerGroup)}if(l>=i.length&&(l=i.length-1),d===s)return l!==o&&(t.snapIndex=l,t.emit("snapIndexChange")),void(t.params.loop&&t.virtual&&t.params.virtual.enabled&&(t.realIndex=c(d)));let p;p=t.virtual&&n.virtual.enabled&&n.loop?c(d):t.slides[d]?parseInt(t.slides[d].getAttribute("data-swiper-slide-index")||d,10):d,Object.assign(t,{previousSnapIndex:o,snapIndex:l,previousRealIndex:a,realIndex:p,previousIndex:s,activeIndex:d}),t.initialized&&T(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(a!==p&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const r=this,i=r.params;let n=e.closest(`.${i.slideClass}, swiper-slide`);!n&&r.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!n&&e.matches&&e.matches(`.${i.slideClass}, swiper-slide`)&&(n=e)}));let s,a=!1;if(n)for(let e=0;e<r.slides.length;e+=1)if(r.slides[e]===n){a=!0,s=e;break}if(!n||!a)return r.clickedSlide=void 0,void(r.clickedIndex=void 0);r.clickedSlide=n,r.virtual&&r.params.virtual.enabled?r.clickedIndex=parseInt(n.getAttribute("data-swiper-slide-index"),10):r.clickedIndex=s,i.slideToClickedSlide&&void 0!==r.clickedIndex&&r.clickedIndex!==r.activeIndex&&r.slideToClickedSlide()}};function M(e){let{swiper:t,runCallbacks:r,direction:i,step:n}=e;const{activeIndex:s,previousIndex:a}=t;let o=i;if(o||(o=s>a?"next":s<a?"prev":"reset"),t.emit(`transition${n}`),r&&s!==a){if("reset"===o)return void t.emit(`slideResetTransition${n}`);t.emit(`slideChangeTransition${n}`),"next"===o?t.emit(`slideNextTransition${n}`):t.emit(`slidePrevTransition${n}`)}}var k={slideTo:function(e,t,r,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===r&&(r=!0),"string"==typeof e&&(e=parseInt(e,10));const s=this;let a=e;a<0&&(a=0);const{params:o,snapGrid:l,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:A,wrapperEl:m,enabled:h}=s;if(s.animating&&o.preventInteractionOnTransition||!h&&!i&&!n)return!1;const f=Math.min(s.params.slidesPerGroupSkip,a);let g=f+Math.floor((a-f)/s.params.slidesPerGroup);g>=l.length&&(g=l.length-1);const C=-l[g];if(o.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*C),r=Math.floor(100*d[e]),i=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=r&&t<i-(i-r)/2?a=e:t>=r&&t<i&&(a=e+1):t>=r&&(a=e)}if(s.initialized&&a!==p){if(!s.allowSlideNext&&(A?C>s.translate&&C>s.minTranslate():C<s.translate&&C<s.minTranslate()))return!1;if(!s.allowSlidePrev&&C>s.translate&&C>s.maxTranslate()&&(p||0)!==a)return!1}let v;if(a!==(c||0)&&r&&s.emit("beforeSlideChangeStart"),s.updateProgress(C),v=a>p?"next":a<p?"prev":"reset",A&&-C===s.translate||!A&&C===s.translate)return s.updateActiveIndex(a),o.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),"slide"!==o.effect&&s.setTranslate(C),"reset"!==v&&(s.transitionStart(r,v),s.transitionEnd(r,v)),!1;if(o.cssMode){const e=s.isHorizontal(),r=A?C:-C;if(0===t){const t=s.virtual&&s.params.virtual.enabled;t&&(s.wrapperEl.style.scrollSnapType="none",s._immediateVirtual=!0),t&&!s._cssModeVirtualInitialSet&&s.params.initialSlide>0?(s._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{m[e?"scrollLeft":"scrollTop"]=r}))):m[e?"scrollLeft":"scrollTop"]=r,t&&requestAnimationFrame((()=>{s.wrapperEl.style.scrollSnapType="",s._immediateVirtual=!1}))}else{if(!s.support.smoothScroll)return u({swiper:s,targetPosition:r,side:e?"left":"top"}),!0;m.scrollTo({[e?"left":"top"]:r,behavior:"smooth"})}return!0}return s.setTransition(t),s.setTranslate(C),s.updateActiveIndex(a),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,i),s.transitionStart(r,v),0===t?s.transitionEnd(r,v):s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.wrapperEl.removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(r,v))}),s.wrapperEl.addEventListener("transitionend",s.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,r,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===r&&(r=!0),"string"==typeof e&&(e=parseInt(e,10));const n=this;let s=e;return n.params.loop&&(n.virtual&&n.params.virtual.enabled?s+=n.virtual.slidesBefore:s=n.getSlideIndexByData(s)),n.slideTo(s,t,r,i)},slideNext:function(e,t,r){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{enabled:n,params:s,animating:a}=i;if(!n)return i;let o=s.slidesPerGroup;"auto"===s.slidesPerView&&1===s.slidesPerGroup&&s.slidesPerGroupAuto&&(o=Math.max(i.slidesPerViewDynamic("current",!0),1));const l=i.activeIndex<s.slidesPerGroupSkip?1:o,d=i.virtual&&s.virtual.enabled;if(s.loop){if(a&&!d&&s.loopPreventsSliding)return!1;if(i.loopFix({direction:"next"}),i._clientLeft=i.wrapperEl.clientLeft,i.activeIndex===i.slides.length-1&&s.cssMode)return requestAnimationFrame((()=>{i.slideTo(i.activeIndex+l)})),!0}return s.rewind&&i.isEnd?i.slideTo(0,e,t,r):i.slideTo(i.activeIndex+l)},slidePrev:function(e,t,r){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{params:n,snapGrid:s,slidesGrid:a,rtlTranslate:o,enabled:l,animating:d}=i;if(!l)return i;const c=i.virtual&&n.virtual.enabled;if(n.loop){if(d&&!c&&n.loopPreventsSliding)return!1;i.loopFix({direction:"prev"}),i._clientLeft=i.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const A=p(o?i.translate:-i.translate),m=s.map((e=>p(e)));let u=s[m.indexOf(A)-1];if(void 0===u&&n.cssMode){let e;s.forEach(((t,r)=>{A>=t&&(e=r)})),void 0!==e&&(u=s[e>0?e-1:e])}let h=0;if(void 0!==u&&(h=a.indexOf(u),h<0&&(h=i.activeIndex-1),"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(h=h-i.slidesPerViewDynamic("previous",!0)+1,h=Math.max(h,0))),n.rewind&&i.isBeginning){const n=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1;return i.slideTo(n,e,t,r)}return n.loop&&0===i.activeIndex&&n.cssMode?(requestAnimationFrame((()=>{i.slideTo(h,e,t,r)})),!0):i.slideTo(h,e,t,r)},slideReset:function(e,t,r){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,r)},slideToClosest:function(e,t,r,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===i&&(i=.5);const n=this;let s=n.activeIndex;const a=Math.min(n.params.slidesPerGroupSkip,s),o=a+Math.floor((s-a)/n.params.slidesPerGroup),l=n.rtlTranslate?n.translate:-n.translate;if(l>=n.snapGrid[o]){const e=n.snapGrid[o];l-e>(n.snapGrid[o+1]-e)*i&&(s+=n.params.slidesPerGroup)}else{const e=n.snapGrid[o-1];l-e<=(n.snapGrid[o]-e)*i&&(s-=n.params.slidesPerGroup)}return s=Math.max(s,0),s=Math.min(s,n.slidesGrid.length-1),n.slideTo(s,e,t,r)},slideToClickedSlide:function(){const e=this,{params:t,slidesEl:r}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let n,s=e.clickedIndex;const a=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;n=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?s<e.loopedSlides-i/2||s>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),s=e.getSlideIndex(h(r,`${a}[data-swiper-slide-index="${n}"]`)[0]),d((()=>{e.slideTo(s)}))):e.slideTo(s):s>e.slides.length-i?(e.loopFix(),s=e.getSlideIndex(h(r,`${a}[data-swiper-slide-index="${n}"]`)[0]),d((()=>{e.slideTo(s)}))):e.slideTo(s)}else e.slideTo(s)}};function L(e){const t=this,r=a(),i=l(),n=t.touchEventsData;n.evCache.push(e);const{params:s,touches:o,enabled:d}=t;if(!d)return;if(!s.simulateTouch&&"mouse"===e.pointerType)return;if(t.animating&&s.preventInteractionOnTransition)return;!t.animating&&s.cssMode&&s.loop&&t.loopFix();let p=e;p.originalEvent&&(p=p.originalEvent);let A=p.target;if("wrapper"===s.touchEventsTarget&&!t.wrapperEl.contains(A))return;if("which"in p&&3===p.which)return;if("button"in p&&p.button>0)return;if(n.isTouched&&n.isMoved)return;const m=!!s.noSwipingClass&&""!==s.noSwipingClass,u=e.composedPath?e.composedPath():e.path;m&&p.target&&p.target.shadowRoot&&u&&(A=u[0]);const h=s.noSwipingSelector?s.noSwipingSelector:`.${s.noSwipingClass}`,f=!(!p.target||!p.target.shadowRoot);if(s.noSwiping&&(f?function(e,t){return void 0===t&&(t=this),function t(r){if(!r||r===a()||r===l())return null;r.assignedSlot&&(r=r.assignedSlot);const i=r.closest(e);return i||r.getRootNode?i||t(r.getRootNode().host):null}(t)}(h,A):A.closest(h)))return void(t.allowClick=!0);if(s.swipeHandler&&!A.closest(s.swipeHandler))return;o.currentX=p.pageX,o.currentY=p.pageY;const g=o.currentX,C=o.currentY,v=s.edgeSwipeDetection||s.iOSEdgeSwipeDetection,w=s.edgeSwipeThreshold||s.iOSEdgeSwipeThreshold;if(v&&(g<=w||g>=i.innerWidth-w)){if("prevent"!==v)return;e.preventDefault()}Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=g,o.startY=C,n.touchStartTime=c(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,s.threshold>0&&(n.allowThresholdMove=!1);let x=!0;A.matches(n.focusableElements)&&(x=!1,"SELECT"===A.nodeName&&(n.isTouched=!1)),r.activeElement&&r.activeElement.matches(n.focusableElements)&&r.activeElement!==A&&r.activeElement.blur();const b=x&&t.allowTouchMove&&s.touchStartPreventDefault;!s.touchStartForcePreventDefault&&!b||A.isContentEditable||p.preventDefault(),s.freeMode&&s.freeMode.enabled&&t.freeMode&&t.animating&&!s.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",p)}function B(e){const t=a(),r=this,i=r.touchEventsData,{params:n,touches:s,rtlTranslate:o,enabled:l}=r;if(!l)return;if(!n.simulateTouch&&"mouse"===e.pointerType)return;let d=e;if(d.originalEvent&&(d=d.originalEvent),!i.isTouched)return void(i.startMoving&&i.isScrolling&&r.emit("touchMoveOpposite",d));const p=i.evCache.findIndex((e=>e.pointerId===d.pointerId));p>=0&&(i.evCache[p]=d);const A=i.evCache.length>1?i.evCache[0]:d,m=A.pageX,u=A.pageY;if(d.preventedByNestedSwiper)return s.startX=m,void(s.startY=u);if(!r.allowTouchMove)return d.target.matches(i.focusableElements)||(r.allowClick=!1),void(i.isTouched&&(Object.assign(s,{startX:m,startY:u,prevX:r.touches.currentX,prevY:r.touches.currentY,currentX:m,currentY:u}),i.touchStartTime=c()));if(n.touchReleaseOnEdges&&!n.loop)if(r.isVertical()){if(u<s.startY&&r.translate<=r.maxTranslate()||u>s.startY&&r.translate>=r.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(m<s.startX&&r.translate<=r.maxTranslate()||m>s.startX&&r.translate>=r.minTranslate())return;if(t.activeElement&&d.target===t.activeElement&&d.target.matches(i.focusableElements))return i.isMoved=!0,void(r.allowClick=!1);if(i.allowTouchCallbacks&&r.emit("touchMove",d),d.targetTouches&&d.targetTouches.length>1)return;s.currentX=m,s.currentY=u;const h=s.currentX-s.startX,f=s.currentY-s.startY;if(r.params.threshold&&Math.sqrt(h**2+f**2)<r.params.threshold)return;if(void 0===i.isScrolling){let e;r.isHorizontal()&&s.currentY===s.startY||r.isVertical()&&s.currentX===s.startX?i.isScrolling=!1:h*h+f*f>=25&&(e=180*Math.atan2(Math.abs(f),Math.abs(h))/Math.PI,i.isScrolling=r.isHorizontal()?e>n.touchAngle:90-e>n.touchAngle)}if(i.isScrolling&&r.emit("touchMoveOpposite",d),void 0===i.startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(i.startMoving=!0)),i.isScrolling||r.zoom&&r.params.zoom&&r.params.zoom.enabled&&i.evCache.length>1)return void(i.isTouched=!1);if(!i.startMoving)return;r.allowClick=!1,!n.cssMode&&d.cancelable&&d.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&d.stopPropagation();let g=r.isHorizontal()?h:f,C=r.isHorizontal()?s.currentX-s.previousX:s.currentY-s.previousY;n.oneWayMovement&&(g=Math.abs(g)*(o?1:-1),C=Math.abs(C)*(o?1:-1)),s.diff=g,g*=n.touchRatio,o&&(g=-g,C=-C);const v=r.touchesDirection;r.swipeDirection=g>0?"prev":"next",r.touchesDirection=C>0?"prev":"next";const w=r.params.loop&&!n.cssMode,x="next"===r.swipeDirection&&r.allowSlideNext||"prev"===r.swipeDirection&&r.allowSlidePrev;if(!i.isMoved){if(w&&x&&r.loopFix({direction:r.swipeDirection}),i.startTranslate=r.getTranslate(),r.setTransition(0),r.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});r.wrapperEl.dispatchEvent(e)}i.allowMomentumBounce=!1,!n.grabCursor||!0!==r.allowSlideNext&&!0!==r.allowSlidePrev||r.setGrabCursor(!0),r.emit("sliderFirstMove",d)}let b;i.isMoved&&v!==r.touchesDirection&&w&&x&&Math.abs(g)>=1&&(r.loopFix({direction:r.swipeDirection,setTranslate:!0}),b=!0),r.emit("sliderMove",d),i.isMoved=!0,i.currentTranslate=g+i.startTranslate;let y=!0,E=n.resistanceRatio;if(n.touchReleaseOnEdges&&(E=0),g>0?(w&&x&&!b&&i.currentTranslate>(n.centeredSlides?r.minTranslate()-r.size/2:r.minTranslate())&&r.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),i.currentTranslate>r.minTranslate()&&(y=!1,n.resistance&&(i.currentTranslate=r.minTranslate()-1+(-r.minTranslate()+i.startTranslate+g)**E))):g<0&&(w&&x&&!b&&i.currentTranslate<(n.centeredSlides?r.maxTranslate()+r.size/2:r.maxTranslate())&&r.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:r.slides.length-("auto"===n.slidesPerView?r.slidesPerViewDynamic():Math.ceil(parseFloat(n.slidesPerView,10)))}),i.currentTranslate<r.maxTranslate()&&(y=!1,n.resistance&&(i.currentTranslate=r.maxTranslate()+1-(r.maxTranslate()-i.startTranslate-g)**E))),y&&(d.preventedByNestedSwiper=!0),!r.allowSlideNext&&"next"===r.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!r.allowSlidePrev&&"prev"===r.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),r.allowSlidePrev||r.allowSlideNext||(i.currentTranslate=i.startTranslate),n.threshold>0){if(!(Math.abs(g)>n.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,i.currentTranslate=i.startTranslate,void(s.diff=r.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}n.followFinger&&!n.cssMode&&((n.freeMode&&n.freeMode.enabled&&r.freeMode||n.watchSlidesProgress)&&(r.updateActiveIndex(),r.updateSlidesClasses()),n.freeMode&&n.freeMode.enabled&&r.freeMode&&r.freeMode.onTouchMove(),r.updateProgress(i.currentTranslate),r.setTranslate(i.currentTranslate))}function z(e){const t=this,r=t.touchEventsData,i=r.evCache.findIndex((t=>t.pointerId===e.pointerId));if(i>=0&&r.evCache.splice(i,1),["pointercancel","pointerout","pointerleave","contextmenu"].includes(e.type)&&(!["pointercancel","contextmenu"].includes(e.type)||!t.browser.isSafari&&!t.browser.isWebView))return;const{params:n,touches:s,rtlTranslate:a,slidesGrid:o,enabled:l}=t;if(!l)return;if(!n.simulateTouch&&"mouse"===e.pointerType)return;let p=e;if(p.originalEvent&&(p=p.originalEvent),r.allowTouchCallbacks&&t.emit("touchEnd",p),r.allowTouchCallbacks=!1,!r.isTouched)return r.isMoved&&n.grabCursor&&t.setGrabCursor(!1),r.isMoved=!1,void(r.startMoving=!1);n.grabCursor&&r.isMoved&&r.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const A=c(),m=A-r.touchStartTime;if(t.allowClick){const e=p.path||p.composedPath&&p.composedPath();t.updateClickedSlide(e&&e[0]||p.target,e),t.emit("tap click",p),m<300&&A-r.lastClickTime<300&&t.emit("doubleTap doubleClick",p)}if(r.lastClickTime=c(),d((()=>{t.destroyed||(t.allowClick=!0)})),!r.isTouched||!r.isMoved||!t.swipeDirection||0===s.diff||r.currentTranslate===r.startTranslate)return r.isTouched=!1,r.isMoved=!1,void(r.startMoving=!1);let u;if(r.isTouched=!1,r.isMoved=!1,r.startMoving=!1,u=n.followFinger?a?t.translate:-t.translate:-r.currentTranslate,n.cssMode)return;if(n.freeMode&&n.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:u});let h=0,f=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<n.slidesPerGroupSkip?1:n.slidesPerGroup){const t=e<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==o[e+t]?u>=o[e]&&u<o[e+t]&&(h=e,f=o[e+t]-o[e]):u>=o[e]&&(h=e,f=o[o.length-1]-o[o.length-2])}let g=null,C=null;n.rewind&&(t.isBeginning?C=n.virtual&&n.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(g=0));const v=(u-o[h])/f,w=h<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(m>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(v>=n.longSwipesRatio?t.slideTo(n.rewind&&t.isEnd?g:h+w):t.slideTo(h)),"prev"===t.swipeDirection&&(v>1-n.longSwipesRatio?t.slideTo(h+w):null!==C&&v<0&&Math.abs(v)>n.longSwipesRatio?t.slideTo(C):t.slideTo(h))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||p.target!==t.navigation.nextEl&&p.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==g?g:h+w),"prev"===t.swipeDirection&&t.slideTo(null!==C?C:h)):p.target===t.navigation.nextEl?t.slideTo(h+w):t.slideTo(h)}}function O(){const e=this,{params:t,el:r}=e;if(r&&0===r.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:n,snapGrid:s}=e,a=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const o=a&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||o?e.params.loop&&!a?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=n,e.allowSlideNext=i,e.params.watchOverflow&&s!==e.snapGrid&&e.checkOverflow()}function I(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function G(){const e=this,{wrapperEl:t,rtlTranslate:r,enabled:i}=e;if(!i)return;let n;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const s=e.maxTranslate()-e.minTranslate();n=0===s?0:(e.translate-e.minTranslate())/s,n!==e.progress&&e.updateProgress(r?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function F(e){const t=this;E(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}let _=!1;function N(){}const D=(e,t)=>{const r=a(),{params:i,el:n,wrapperEl:s,device:o}=e,l=!!i.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;n[d]("pointerdown",e.onTouchStart,{passive:!1}),r[d]("pointermove",e.onTouchMove,{passive:!1,capture:l}),r[d]("pointerup",e.onTouchEnd,{passive:!0}),r[d]("pointercancel",e.onTouchEnd,{passive:!0}),r[d]("pointerout",e.onTouchEnd,{passive:!0}),r[d]("pointerleave",e.onTouchEnd,{passive:!0}),r[d]("contextmenu",e.onTouchEnd,{passive:!0}),(i.preventClicks||i.preventClicksPropagation)&&n[d]("click",e.onClick,!0),i.cssMode&&s[d]("scroll",e.onScroll),i.updateOnWindowResize?e[c](o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",O,!0):e[c]("observerUpdate",O,!0),n[d]("load",e.onLoad,{capture:!0})},j=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var W={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopedSlides:null,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function H(e,t){return function(r){void 0===r&&(r={});const i=Object.keys(r)[0],n=r[i];"object"==typeof n&&null!==n?(!0===e[i]&&(e[i]={enabled:!0}),"navigation"===i&&e[i]&&e[i].enabled&&!e[i].prevEl&&!e[i].nextEl&&(e[i].auto=!0),["pagination","scrollbar"].indexOf(i)>=0&&e[i]&&e[i].enabled&&!e[i].el&&(e[i].auto=!0),i in e&&"enabled"in n?("object"!=typeof e[i]||"enabled"in e[i]||(e[i].enabled=!0),e[i]||(e[i]={enabled:!1}),A(t,r)):A(t,r)):A(t,r)}}const V={eventsEmitter:y,update:P,translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:r,translate:i,wrapperEl:n}=this;if(t.virtualTranslate)return r?-i:i;if(t.cssMode)return i;let s=function(e,t){void 0===t&&(t="x");const r=l();let i,n,s;const a=function(e){const t=l();let r;return t.getComputedStyle&&(r=t.getComputedStyle(e,null)),!r&&e.currentStyle&&(r=e.currentStyle),r||(r=e.style),r}(e);return r.WebKitCSSMatrix?(n=a.transform||a.webkitTransform,n.split(",").length>6&&(n=n.split(", ").map((e=>e.replace(",","."))).join(", ")),s=new r.WebKitCSSMatrix("none"===n?"":n)):(s=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=s.toString().split(",")),"x"===t&&(n=r.WebKitCSSMatrix?s.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(n=r.WebKitCSSMatrix?s.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),n||0}(n,e);return s+=this.cssOverflowAdjustment(),r&&(s=-s),s||0},setTranslate:function(e,t){const r=this,{rtlTranslate:i,params:n,wrapperEl:s,progress:a}=r;let o,l=0,d=0;r.isHorizontal()?l=i?-e:e:d=e,n.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),r.previousTranslate=r.translate,r.translate=r.isHorizontal()?l:d,n.cssMode?s[r.isHorizontal()?"scrollLeft":"scrollTop"]=r.isHorizontal()?-l:-d:n.virtualTranslate||(r.isHorizontal()?l-=r.cssOverflowAdjustment():d-=r.cssOverflowAdjustment(),s.style.transform=`translate3d(${l}px, ${d}px, 0px)`);const c=r.maxTranslate()-r.minTranslate();o=0===c?0:(e-r.minTranslate())/c,o!==a&&r.updateProgress(e),r.emit("setTranslate",r.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,r,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===r&&(r=!0),void 0===i&&(i=!0);const s=this,{params:a,wrapperEl:o}=s;if(s.animating&&a.preventInteractionOnTransition)return!1;const l=s.minTranslate(),d=s.maxTranslate();let c;if(c=i&&e>l?l:i&&e<d?d:e,s.updateProgress(c),a.cssMode){const e=s.isHorizontal();if(0===t)o[e?"scrollLeft":"scrollTop"]=-c;else{if(!s.support.smoothScroll)return u({swiper:s,targetPosition:-c,side:e?"left":"top"}),!0;o.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(s.setTransition(0),s.setTranslate(c),r&&(s.emit("beforeTransitionStart",t,n),s.emit("transitionEnd"))):(s.setTransition(t),s.setTranslate(c),r&&(s.emit("beforeTransitionStart",t,n),s.emit("transitionStart")),s.animating||(s.animating=!0,s.onTranslateToWrapperTransitionEnd||(s.onTranslateToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.wrapperEl.removeEventListener("transitionend",s.onTranslateToWrapperTransitionEnd),s.onTranslateToWrapperTransitionEnd=null,delete s.onTranslateToWrapperTransitionEnd,r&&s.emit("transitionEnd"))}),s.wrapperEl.addEventListener("transitionend",s.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const r=this;r.params.cssMode||(r.wrapperEl.style.transitionDuration=`${e}ms`,r.wrapperEl.style.transitionDelay=0===e?"0ms":""),r.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const r=this,{params:i}=r;i.cssMode||(i.autoHeight&&r.updateAutoHeight(),M({swiper:r,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const r=this,{params:i}=r;r.animating=!1,i.cssMode||(r.setTransition(0),M({swiper:r,runCallbacks:e,direction:t,step:"End"}))}},slide:k,loop:{loopCreate:function(e){const t=this,{params:r,slidesEl:i}=t;!r.loop||t.virtual&&t.params.virtual.enabled||(h(i,`.${r.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)})),t.loopFix({slideRealIndex:e,direction:r.centeredSlides?void 0:"next"}))},loopFix:function(e){let{slideRealIndex:t,slideTo:r=!0,direction:i,setTranslate:n,activeSlideIndex:s,byController:a,byMousewheel:o}=void 0===e?{}:e;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:p,slidesEl:A,params:m}=l;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&m.virtual.enabled)return r&&(m.centeredSlides||0!==l.snapIndex?m.centeredSlides&&l.snapIndex<m.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=c,l.allowSlideNext=p,void l.emit("loopFix");const u="auto"===m.slidesPerView?l.slidesPerViewDynamic():Math.ceil(parseFloat(m.slidesPerView,10));let h=m.loopedSlides||u;h%m.slidesPerGroup!=0&&(h+=m.slidesPerGroup-h%m.slidesPerGroup),l.loopedSlides=h;const f=[],g=[];let C=l.activeIndex;void 0===s?s=l.getSlideIndex(l.slides.filter((e=>e.classList.contains(m.slideActiveClass)))[0]):C=s;const v="next"===i||!i,w="prev"===i||!i;let x=0,b=0;if(s<h){x=Math.max(h-s,m.slidesPerGroup);for(let e=0;e<h-s;e+=1){const t=e-Math.floor(e/d.length)*d.length;f.push(d.length-t-1)}}else if(s>l.slides.length-2*h){b=Math.max(s-(l.slides.length-2*h),m.slidesPerGroup);for(let e=0;e<b;e+=1){const t=e-Math.floor(e/d.length)*d.length;g.push(t)}}if(w&&f.forEach((e=>{l.slides[e].swiperLoopMoveDOM=!0,A.prepend(l.slides[e]),l.slides[e].swiperLoopMoveDOM=!1})),v&&g.forEach((e=>{l.slides[e].swiperLoopMoveDOM=!0,A.append(l.slides[e]),l.slides[e].swiperLoopMoveDOM=!1})),l.recalcSlides(),"auto"===m.slidesPerView&&l.updateSlides(),m.watchSlidesProgress&&l.updateSlidesOffset(),r)if(f.length>0&&w)if(void 0===t){const e=l.slidesGrid[C],t=l.slidesGrid[C+x]-e;o?l.setTranslate(l.translate-t):(l.slideTo(C+x,0,!1,!0),n&&(l.touches[l.isHorizontal()?"startX":"startY"]+=t,l.touchEventsData.currentTranslate=l.translate))}else n&&(l.slideToLoop(t,0,!1,!0),l.touchEventsData.currentTranslate=l.translate);else if(g.length>0&&v)if(void 0===t){const e=l.slidesGrid[C],t=l.slidesGrid[C-b]-e;o?l.setTranslate(l.translate-t):(l.slideTo(C-b,0,!1,!0),n&&(l.touches[l.isHorizontal()?"startX":"startY"]+=t,l.touchEventsData.currentTranslate=l.translate))}else l.slideToLoop(t,0,!1,!0);if(l.allowSlidePrev=c,l.allowSlideNext=p,l.controller&&l.controller.control&&!a){const e={slideRealIndex:t,direction:i,setTranslate:n,activeSlideIndex:s,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===m.slidesPerView&&r})})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...e,slideTo:l.controller.control.params.slidesPerView===m.slidesPerView&&r})}l.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:r}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{r.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}},grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const r="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),r.style.cursor="move",r.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,t=a(),{params:r}=e;e.onTouchStart=L.bind(e),e.onTouchMove=B.bind(e),e.onTouchEnd=z.bind(e),r.cssMode&&(e.onScroll=G.bind(e)),e.onClick=I.bind(e),e.onLoad=F.bind(e),_||(t.addEventListener("touchstart",N),_=!0),D(e,"on")},detachEvents:function(){D(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:r,params:i,el:n}=e,s=i.breakpoints;if(!s||s&&0===Object.keys(s).length)return;const a=e.getBreakpoint(s,e.params.breakpointsBase,e.el);if(!a||e.currentBreakpoint===a)return;const o=(a in s?s[a]:void 0)||e.originalParams,l=j(e,i),d=j(e,o),c=i.enabled;l&&!d?(n.classList.remove(`${i.containerModifierClass}grid`,`${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!l&&d&&(n.classList.add(`${i.containerModifierClass}grid`),(o.grid.fill&&"column"===o.grid.fill||!o.grid.fill&&"column"===i.grid.fill)&&n.classList.add(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===o[t])return;const r=i[t]&&i[t].enabled,n=o[t]&&o[t].enabled;r&&!n&&e[t].disable(),!r&&n&&e[t].enable()}));const p=o.direction&&o.direction!==i.direction,m=i.loop&&(o.slidesPerView!==i.slidesPerView||p),u=i.loop;p&&r&&e.changeDirection(),A(e.params,o);const h=e.params.enabled,f=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),c&&!h?e.disable():!c&&h&&e.enable(),e.currentBreakpoint=a,e.emit("_beforeBreakpoint",o),r&&(m?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!u&&f?(e.loopCreate(t),e.updateSlides()):u&&!f&&e.loopDestroy()),e.emit("breakpoint",o)},getBreakpoint:function(e,t,r){if(void 0===t&&(t="window"),!e||"container"===t&&!r)return;let i=!1;const n=l(),s="window"===t?n.innerHeight:r.clientHeight,a=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:s*t,point:e}}return{value:e,point:e}}));a.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<a.length;e+=1){const{point:s,value:o}=a[e];"window"===t?n.matchMedia(`(min-width: ${o}px)`).matches&&(i=s):o<=r.clientWidth&&(i=s)}return i||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:r}=e,{slidesOffsetBefore:i}=r;if(i){const t=e.slides.length-1,r=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*i;e.isLocked=e.size>r}else e.isLocked=1===e.snapGrid.length;!0===r.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===r.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:r,rtl:i,el:n,device:s}=e,a=function(e,t){const r=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((i=>{e[i]&&r.push(t+i)})):"string"==typeof e&&r.push(t+e)})),r}(["initialized",r.direction,{"free-mode":e.params.freeMode&&r.freeMode.enabled},{autoheight:r.autoHeight},{rtl:i},{grid:r.grid&&r.grid.rows>1},{"grid-column":r.grid&&r.grid.rows>1&&"column"===r.grid.fill},{android:s.android},{ios:s.ios},{"css-mode":r.cssMode},{centered:r.cssMode&&r.centeredSlides},{"watch-progress":r.watchSlidesProgress}],r.containerModifierClass);t.push(...a),n.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e.classList.remove(...t),this.emitContainerClasses()}}},$={};class Y{constructor(){let e,t;for(var r=arguments.length,i=new Array(r),n=0;n<r;n++)i[n]=arguments[n];1===i.length&&i[0].constructor&&"Object"===Object.prototype.toString.call(i[0]).slice(8,-1)?t=i[0]:[e,t]=i,t||(t={}),t=A({},t),e&&!t.el&&(t.el=e);const s=a();if(t.el&&"string"==typeof t.el&&s.querySelectorAll(t.el).length>1){const e=[];return s.querySelectorAll(t.el).forEach((r=>{const i=A({},t,{el:r});e.push(new Y(i))})),e}const o=this;var d;o.__swiper__=!0,o.support=b(),o.device=(void 0===(d={userAgent:t.userAgent})&&(d={}),w||(w=function(e){let{userAgent:t}=void 0===e?{}:e;const r=b(),i=l(),n=i.navigator.platform,s=t||i.navigator.userAgent,a={ios:!1,android:!1},o=i.screen.width,d=i.screen.height,c=s.match(/(Android);?[\s\/]+([\d.]+)?/);let p=s.match(/(iPad).*OS\s([\d_]+)/);const A=s.match(/(iPod)(.*OS\s([\d_]+))?/),m=!p&&s.match(/(iPhone\sOS|iOS)\s([\d_]+)/),u="Win32"===n;let h="MacIntel"===n;return!p&&h&&r.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${o}x${d}`)>=0&&(p=s.match(/(Version)\/([\d.]+)/),p||(p=[0,1,"13_0_0"]),h=!1),c&&!u&&(a.os="android",a.android=!0),(p||m||A)&&(a.os="ios",a.ios=!0),a}(d)),w),o.browser=(x||(x=function(){const e=l();let t=!1;function r(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(r()){const r=String(e.navigator.userAgent);if(r.includes("Version/")){const[e,i]=r.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));t=e<16||16===e&&i<2}}return{isSafari:t||r(),needPerspectiveFix:t,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}()),x),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],t.modules&&Array.isArray(t.modules)&&o.modules.push(...t.modules);const c={};o.modules.forEach((e=>{e({params:t,swiper:o,extendParams:H(t,c),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})}));const p=A({},W,c);return o.params=A({},p,$,t),o.originalParams=A({},o.params),o.passedParams=A({},t),o.params&&o.params.on&&Object.keys(o.params.on).forEach((e=>{o.on(e,o.params.on[e])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===o.params.direction,isVertical:()=>"vertical"===o.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,evCache:[]},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getSlideIndex(e){const{slidesEl:t,params:r}=this,i=g(h(t,`.${r.slideClass}, swiper-slide`)[0]);return g(e)-i}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=h(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const r=this;e=Math.min(Math.max(e,0),1);const i=r.minTranslate(),n=(r.maxTranslate()-i)*e+i;r.translateTo(n,void 0===t?0:t),r.updateActiveIndex(),r.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((r=>{const i=e.getSlideClasses(r);t.push({slideEl:r,classNames:i}),e.emit("_slideClass",r,i)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:r,slides:i,slidesGrid:n,slidesSizesGrid:s,size:a,activeIndex:o}=this;let l=1;if("number"==typeof r.slidesPerView)return r.slidesPerView;if(r.centeredSlides){let e,t=i[o]?i[o].swiperSlideSize:0;for(let r=o+1;r<i.length;r+=1)i[r]&&!e&&(t+=i[r].swiperSlideSize,l+=1,t>a&&(e=!0));for(let r=o-1;r>=0;r-=1)i[r]&&!e&&(t+=i[r].swiperSlideSize,l+=1,t>a&&(e=!0))}else if("current"===e)for(let e=o+1;e<i.length;e+=1)(t?n[e]+s[e]-n[o]<a:n[e]-n[o]<a)&&(l+=1);else for(let e=o-1;e>=0;e-=1)n[o]-n[e]<a&&(l+=1);return l}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:r}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,r=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(r),e.updateActiveIndex(),e.updateSlidesClasses()}let n;if(r.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&E(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),r.freeMode&&r.freeMode.enabled&&!r.cssMode)i(),r.autoHeight&&e.updateAutoHeight();else{if(("auto"===r.slidesPerView||r.slidesPerView>1)&&e.isEnd&&!r.centeredSlides){const t=e.virtual&&r.virtual.enabled?e.virtual.slides:e.slides;n=e.slideTo(t.length-1,0,!1,!0)}else n=e.slideTo(e.activeIndex,0,!1,!0);n||i()}r.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const r=this,i=r.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(r.el.classList.remove(`${r.params.containerModifierClass}${i}`),r.el.classList.add(`${r.params.containerModifierClass}${e}`),r.emitContainerClasses(),r.params.direction=e,r.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),r.emit("changeDirection"),t&&r.update()),r}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let r=e||t.params.el;if("string"==typeof r&&(r=document.querySelector(r)),!r)return!1;r.swiper=t,r.parentNode&&r.parentNode.host&&"SWIPER-CONTAINER"===r.parentNode.host.nodeName&&(t.isElement=!0);const i=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let n=r&&r.shadowRoot&&r.shadowRoot.querySelector?r.shadowRoot.querySelector(i()):h(r,i())[0];return!n&&t.params.createElements&&(n=function(e,t){void 0===t&&(t=[]);const r=document.createElement("div");return r.classList.add(...Array.isArray(t)?t:[t]),r}(0,t.params.wrapperClass),r.append(n),h(r,`.${t.params.slideClass}`).forEach((e=>{n.append(e)}))),Object.assign(t,{el:r,wrapperEl:n,slidesEl:t.isElement&&!r.parentNode.host.slideSlots?r.parentNode.host:n,hostEl:t.isElement?r.parentNode.host:r,mounted:!0,rtl:"rtl"===r.dir.toLowerCase()||"rtl"===f(r,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===r.dir.toLowerCase()||"rtl"===f(r,"direction")),wrongRTL:"-webkit-box"===f(n,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const r=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&r.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),r.forEach((e=>{e.complete?E(t,e):e.addEventListener("load",(e=>{E(t,e.target)}))})),T(t),t.initialized=!0,T(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const r=this,{params:i,el:n,wrapperEl:s,slides:a}=r;return void 0===r.params||r.destroyed||(r.emit("beforeDestroy"),r.initialized=!1,r.detachEvents(),i.loop&&r.loopDestroy(),t&&(r.removeClasses(),n.removeAttribute("style"),s.removeAttribute("style"),a&&a.length&&a.forEach((e=>{e.classList.remove(i.slideVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),r.emit("destroy"),Object.keys(r.eventsListeners).forEach((e=>{r.off(e)})),!1!==e&&(r.el.swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(r)),r.destroyed=!0),null}static extendDefaults(e){A($,e)}static get extendedDefaults(){return $}static get defaults(){return W}static installModule(e){Y.prototype.__modules__||(Y.prototype.__modules__=[]);const t=Y.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>Y.installModule(e))),Y):(Y.installModule(e),Y)}}Object.keys(V).forEach((e=>{Object.keys(V[e]).forEach((t=>{Y.prototype[t]=V[e][t]}))})),Y.use([function(e){let{swiper:t,on:r,emit:i}=e;const n=l();let s=null,a=null;const o=()=>{t&&!t.destroyed&&t.initialized&&(i("beforeResize"),i("resize"))},d=()=>{t&&!t.destroyed&&t.initialized&&i("orientationchange")};r("init",(()=>{t.params.resizeObserver&&void 0!==n.ResizeObserver?t&&!t.destroyed&&t.initialized&&(s=new ResizeObserver((e=>{a=n.requestAnimationFrame((()=>{const{width:r,height:i}=t;let n=r,s=i;e.forEach((e=>{let{contentBoxSize:r,contentRect:i,target:a}=e;a&&a!==t.el||(n=i?i.width:(r[0]||r).inlineSize,s=i?i.height:(r[0]||r).blockSize)})),n===r&&s===i||o()}))})),s.observe(t.el)):(n.addEventListener("resize",o),n.addEventListener("orientationchange",d))})),r("destroy",(()=>{a&&n.cancelAnimationFrame(a),s&&s.unobserve&&t.el&&(s.unobserve(t.el),s=null),n.removeEventListener("resize",o),n.removeEventListener("orientationchange",d)}))},function(e){let{swiper:t,extendParams:r,on:i,emit:n}=e;const s=[],a=l(),o=function(e,r){void 0===r&&(r={});const i=new(a.MutationObserver||a.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void n("observerUpdate",e[0]);const r=function(){n("observerUpdate",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(r):a.setTimeout(r,0)}));i.observe(e,{attributes:void 0===r.attributes||r.attributes,childList:void 0===r.childList||r.childList,characterData:void 0===r.characterData||r.characterData}),s.push(i)};r({observer:!1,observeParents:!1,observeSlideChildren:!1}),i("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=function(e,t){const r=[];let i=e.parentElement;for(;i;)r.push(i),i=i.parentElement;return r}(t.hostEl);for(let t=0;t<e.length;t+=1)o(e[t])}o(t.hostEl,{childList:t.params.observeSlideChildren}),o(t.wrapperEl,{attributes:!1})}})),i("destroy",(()=>{s.forEach((e=>{e.disconnect()})),s.splice(0,s.length)}))}])}},t={};function r(i){var n=t[i];if(void 0!==n)return n.exports;var s=t[i]={id:i,exports:{}};return e[i].call(s.exports,s,s.exports,r),s.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var i in t)r.o(t,i)&&!r.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nc=void 0,(()=>{"use strict";const e=r(215);r(48),r(691),r(712),r(59),(0,e.rotateCircle)("240.120"),window.addEventListener("load",(()=>{document.body.classList.remove("preload")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,